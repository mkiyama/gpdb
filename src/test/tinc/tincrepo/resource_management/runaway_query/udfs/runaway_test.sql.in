BEGIN;

-- Register the functions.
     
     
--------------------------------------------------------------------------------
-- @function: 
--        gp_allocate_palloc_test_f
-- @in:
--		content - segment on which to allocate. -1 is master. -2 is all.
--		size - amount of memory to allocate (in bytes)
--		sleep - sleep for a number of seconds after allocation. 0 is disable
--		crit_section - allocate in critical section if true
-- @out:
--		int - amount allocated
--
-- @doc:
--		Wrapper to the C UDF to allocate a specified amount of memory 
--		using a single palloc call on the specified segment
--        
--------------------------------------------------------------------------------  
CREATE OR REPLACE FUNCTION gp_allocate_palloc_test_f(content int, size int, sleep int, crit_section bool)
RETURNS int
AS '@source@', 'gp_allocate_palloc_test'
LANGUAGE C VOLATILE;

--------------------------------------------------------------------------------
-- @function: 
--        gp_allocate_palloc_test_all_segs
-- @in:
--		content - segment on which to allocate. -1 is master. -2 is all.
--		size - amount of memory to allocate (in bytes)
--		sleep - sleep for a number of seconds after allocation. 0 is disable
--		crit_section - allocate in critical section if true
-- @out:
-- 		int - amount allocated
--
-- @doc:
--		Allocates a specified amount of memory using a single palloc call on
--		the specified segment(s). This function executes the UDF on master 
--		and all segments. Only the segments identified by content perform
--		the allocation
--        
--------------------------------------------------------------------------------
CREATE FUNCTION gp_allocate_palloc_test_all_segs(content int, size int, sleep int, crit_section bool)
RETURNS SETOF int
AS
$$
 SELECT gp_allocate_palloc_test_f($1, $2, $3, $4) from gp_dist_random('gp_id')
 UNION ALL
 SELECT gp_allocate_palloc_test_f($1, $2, $3, $4);
$$
LANGUAGE SQL;

--------------------------------------------------------------------------------
-- @function: 
--        gp_allocate_palloc_test_one_seg
-- @in:
--		content - segment on which to allocate; master is not supported.
--		size - amount of memory to allocate (in bytes)
--		sleep - sleep for a number of seconds after allocation. 0 is disable
--		crit_section - allocate in critical section if true
-- @out:
-- 		int - amount allocated
--
-- @doc:
--		Allocates a specified amount of memory using a single palloc call on
--		the specified segment.
--        
--------------------------------------------------------------------------------
CREATE FUNCTION gp_allocate_palloc_test_one_seg(content int, size int, sleep int, crit_section bool)
RETURNS SETOF int
AS
$$
 SELECT gp_allocate_palloc_test_f($1, $2, $3, $4) from gp_dist_random('gp_id');
$$
LANGUAGE SQL;

--------------------------------------------------------------------------------
-- @function: 
--        gp_allocate_top_memory_ctxt_test_f
-- @in:
--		content - segment on which to allocate. -1 is master. -2 is all.
--		size - amount of memory to allocate (in bytes)
--		sleep - sleep for a number of seconds after allocation. 0 is disable
-- @out:
--		int - amount allocated
--
-- @doc:
--		Wrapper to the C UDF to allocate a specified amount of memory 
--		using a single palloc call in the TopMemoryContext on the specified segment
--        
--------------------------------------------------------------------------------  
CREATE OR REPLACE FUNCTION gp_allocate_top_memory_ctxt_test_f(content int, size int, sleep int)
RETURNS int
AS '@source@', 'gp_allocate_top_memory_ctxt_test'
LANGUAGE C VOLATILE;

--------------------------------------------------------------------------------
-- @function: 
--        gp_allocate_top_memory_ctxt_test_all_segs
-- @in:
--		content - segment on which to allocate. -1 is master. -2 is all.
--		size - amount of memory to allocate (in bytes)
--		sleep - sleep for a number of seconds after allocation. 0 is disable
-- @out:
-- 		int - amount allocated
--
-- @doc:
--		Allocates a specified amount of memory using a single palloc call on
--		the specified segment(s) in the TopMemoryContext. 
--		This function executes the UDF on master 
--		and all segments. Only the segments identified by content perform
--		the allocation
--        
--------------------------------------------------------------------------------
CREATE FUNCTION gp_allocate_top_memory_ctxt_test_all_segs(content int, size int, sleep int)
RETURNS SETOF int
AS
$$
 SELECT gp_allocate_top_memory_ctxt_test_f($1, $2, $3) from gp_dist_random('gp_id')
 UNION ALL
 SELECT gp_allocate_top_memory_ctxt_test_f($1, $2, $3);
$$
LANGUAGE SQL;

--------------------------------------------------------------------------------
-- @function: 
--        gp_allocate_palloc_gradual_test_f
-- @in:
--		content - segment on which to allocate. -1 is master. -2 is all.
--		size - amount of memory to allocate (in bytes)
--		sleep - sleep for a number of seconds after allocation. 0 is disable
-- @out:
--		int - amount allocated
--
-- @doc:
--		Wrapper to the C UDF to gradually allocate a specified amount of memory 
--		using a many 10MB palloc calls on the specified segment
--        
--------------------------------------------------------------------------------  
CREATE OR REPLACE FUNCTION gp_allocate_palloc_gradual_test_f(content int, size int, sleep int)
RETURNS int
AS '@source@', 'gp_allocate_palloc_gradual_test'
LANGUAGE C VOLATILE;

--------------------------------------------------------------------------------
-- @function: 
--        gp_allocate_palloc_gradual_test_all_segs
-- @in:
--		content - segment on which to allocate. -1 is master. -2 is all.
--		size - amount of memory to allocate (in bytes)
--		sleep - sleep for a number of seconds after allocation. 0 is disable
-- @out:
-- 		int - amount allocated
--
-- @doc:
--		Gradually allocates a specified amount of memory using 
--		several 10MB palloc call on the specified segment(s). This function 
--		executes the UDF on master and all segments. Only the segments 
--		identified by content perform the allocation
--        
--------------------------------------------------------------------------------
CREATE FUNCTION gp_allocate_palloc_gradual_test_all_segs(content int, size int, sleep int)
RETURNS SETOF int
AS
$$
 SELECT gp_allocate_palloc_gradual_test_f($1, $2, $3) from gp_dist_random('gp_id')
 UNION ALL
 SELECT gp_allocate_palloc_gradual_test_f($1, $2, $3);
$$
LANGUAGE SQL;


--------------------------------------------------------------------------------
-- @function: 
--        gp_inject_fault_test_f
-- @in:
--		content: segid this is applicable to. segid <= -2 means all segments
--		fault_type: type of fault to inject
--		arg: optional argument to the fault type
-- @out:
--		bool - true if fault injector was triggered on segment
--
-- @doc:
--		Wrapper to the C UDF to inject a fault on a specified segment
--        
--------------------------------------------------------------------------------  
CREATE OR REPLACE FUNCTION gp_inject_fault_test_f(content int, fault_type int, arg int)
RETURNS bool
AS '@source@', 'gp_inject_fault_test'
LANGUAGE C VOLATILE;

--------------------------------------------------------------------------------
-- @function: 
--        gp_inject_fault_test_all_segs
-- @in:
--		content: segid this is applicable to. segid <= -2 means all segments
--		fault_type: type of fault to inject
--		arg: optional argument to the fault type
-- @out:
--		bool - true if fault injector was triggered on segment
--
-- @doc:
--		Inject the specified type of fault. Only the segments 
--		identified by content execute the fault injector
--        
--------------------------------------------------------------------------------
CREATE FUNCTION gp_inject_fault_test_all_segs(content int, fault_type int, arg int)
RETURNS SETOF bool
AS
$$
 SELECT gp_inject_fault_test_f($1, $2, $3) from gp_dist_random('gp_id')
 UNION ALL
 SELECT gp_inject_fault_test_f($1, $2, $3);
$$
LANGUAGE SQL;

--------------------------------------------------------------------------------
-- @function: 
--        gp_available_vmem_mb_test_f
-- @in:
--
-- @out:
--		text - format: "segid=N,vmem_mb=X"
--
-- @doc:
--		Wrapper to the C UDF to read the vmem mb available
--        
--------------------------------------------------------------------------------  
CREATE OR REPLACE FUNCTION gp_available_vmem_mb_test_f()
RETURNS text
AS '@source@', 'gp_available_vmem_mb_test'
LANGUAGE C VOLATILE;

--------------------------------------------------------------------------------
-- @function: 
--        gp_available_vmem_mb_test_all_segs
-- @in:
--
-- @out:
--		text - format: "segid=N,vmem_mb=X"
--
-- @doc:
--		Read the number of megabytes available from vmem tracker
--        
--------------------------------------------------------------------------------
CREATE VIEW gp_available_vmem_mb_test_all_segs AS
	SELECT
		substring(val from 'segid=(.*),')::integer as segid,
		substring(val from 'vmem_mb=(.*)$')::integer as vmem_mb
	FROM 
		(SELECT gp_available_vmem_mb_test_f() as val from gp_dist_random('gp_id')) foo
	UNION ALL
	SELECT
		substring(val from 'segid=(.*),')::integer as segid,
		substring(val from 'vmem_mb=(.*)$')::integer as vmem_mb
	FROM 
		(SELECT gp_available_vmem_mb_test_f() as val) foo;


COMMIT;

