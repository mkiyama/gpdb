set optimizer=off;
set statement_mem="1800";
create table cost_agg_t1(a int, b int, c int);
insert into cost_agg_t1 select i, random() * 99999, i % 2000 from generate_series(1, 1000000) i;
create table cost_agg_t2 as select * from cost_agg_t1 with no data;
insert into cost_agg_t2 select i, random() * 99999, i % 300000 from generate_series(1, 1000000) i;
explain select avg(b) from cost_agg_t1 group by c;
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice2; segments: 3)  (cost=16630.00..16654.97 rows=1998 width=36)
   ->  HashAggregate  (cost=16630.00..16654.97 rows=666 width=36)
         Group Key: cost_agg_t1.c
         ->  Redistribute Motion 3:3  (slice1; segments: 3)  (cost=16345.00..16540.00 rows=2000 width=36)
               Hash Key: cost_agg_t1.c
               ->  HashAggregate  (cost=16345.00..16420.00 rows=2000 width=36)
                     Group Key: cost_agg_t1.c
                     ->  Seq Scan on cost_agg_t1  (cost=0.00..11345.00 rows=333334 width=8)
 Optimizer: Postgres query optimizer
(9 rows)

explain select avg(b) from cost_agg_t2 group by c;
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice2; segments: 3)  (cost=36345.00..40165.46 rows=305637 width=36)
   ->  HashAggregate  (cost=36345.00..40165.46 rows=101879 width=36)
         Group Key: c
         ->  Redistribute Motion 3:3  (slice1; segments: 3)  (cost=0.00..31345.00 rows=333334 width=8)
               Hash Key: c
               ->  Seq Scan on cost_agg_t2  (cost=0.00..11345.00 rows=333334 width=8)
 Optimizer: Postgres query optimizer
(7 rows)

insert into cost_agg_t2 select i, random() * 99999,1 from generate_series(1, 200000) i;
analyze cost_agg_t2;
explain select avg(b) from cost_agg_t2 group by c;
                                                QUERY PLAN                                                 
-----------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice2; segments: 3)  (cost=33813.41..35068.84 rows=100434 width=36)
   ->  HashAggregate  (cost=33813.41..35068.84 rows=33478 width=36)
         Group Key: cost_agg_t2.c
         ->  Redistribute Motion 3:3  (slice1; segments: 3)  (cost=19614.00..29329.39 rows=99645 width=36)
               Hash Key: cost_agg_t2.c
               ->  HashAggregate  (cost=19614.00..23350.69 rows=99645 width=36)
                     Group Key: cost_agg_t2.c
                     ->  Seq Scan on cost_agg_t2  (cost=0.00..13614.00 rows=400000 width=8)
 Optimizer: Postgres query optimizer
(9 rows)

drop table cost_agg_t1;
drop table cost_agg_t2;
reset statement_mem;
reset optimizer;
