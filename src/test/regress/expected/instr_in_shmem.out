-- start_ignore
-- Test instrument in shmem does not break EXPLAIN
-- and EXPLAIN ANALYZE. Also instrumentation slots
-- are correctly recycled.
-- This test can not run in parallel with other tests.
-- end_ignore
-- default value
SHOW GP_ENABLE_QUERY_METRICS;
 gp_enable_query_metrics 
-------------------------
 on
(1 row)

SELECT 1;
 ?column? 
----------
        1
(1 row)

SHOW GP_INSTRUMENT_SHMEM_SIZE;
 gp_instrument_shmem_size 
--------------------------
 5MB
(1 row)

SELECT 1;
 ?column? 
----------
        1
(1 row)

-- start_ignore
DROP SCHEMA IF EXISTS QUERY_METRICS CASCADE; 
NOTICE:  schema "query_metrics" does not exist, skipping
CREATE SCHEMA QUERY_METRICS;
SET SEARCH_PATH=QUERY_METRICS;
CREATE EXTERNAL WEB TABLE __gp_localid
(
    localid    int
)
EXECUTE E'echo $GP_SEGMENT_ID' FORMAT 'TEXT';
GRANT SELECT ON TABLE __gp_localid TO public;
CREATE EXTERNAL WEB TABLE __gp_masterid
(
    masterid    int
)
EXECUTE E'echo $GP_SEGMENT_ID' ON MASTER FORMAT 'TEXT';
GRANT SELECT ON TABLE __gp_masterid TO public;
CREATE FUNCTION gp_instrument_shmem_summary_f()
RETURNS SETOF RECORD
AS '$libdir/gp_instrument_shmem', 'gp_instrument_shmem_summary'
LANGUAGE C IMMUTABLE;
GRANT EXECUTE ON FUNCTION gp_instrument_shmem_summary_f() TO public;
CREATE VIEW gp_instrument_shmem_summary AS
WITH all_entries AS (
  SELECT C.*
    FROM __gp_localid, gp_instrument_shmem_summary_f() as C (
      segid int, num_free bigint, num_used bigint
    )
  UNION ALL
  SELECT C.*
    FROM __gp_masterid, gp_instrument_shmem_summary_f() as C (
      segid int, num_free bigint, num_used bigint
    ))
SELECT segid, num_free, num_used
FROM all_entries
ORDER BY segid;
GRANT SELECT ON gp_instrument_shmem_summary TO public;
CREATE FUNCTION gp_instrument_shmem_detail_f()
RETURNS SETOF RECORD
AS '$libdir/gp_instrument_shmem', 'gp_instrument_shmem_detail'
LANGUAGE C IMMUTABLE;
GRANT EXECUTE ON FUNCTION gp_instrument_shmem_detail_f() TO public;
CREATE VIEW gp_instrument_shmem_detail AS
WITH all_entries AS (
  SELECT C.*
    FROM __gp_localid, gp_instrument_shmem_detail_f() as C (
      tmid int4,ssid int4,ccnt int2,segid int2,pid int4
      ,nid int2,tuplecount int8,nloops int8,ntuples int8
    )
  UNION ALL
  SELECT C.*
    FROM __gp_masterid, gp_instrument_shmem_detail_f() as C (
      tmid int4,ssid int4,ccnt int2,segid int2,pid int4
      ,nid int2,tuplecount int8,nloops int8,ntuples int8
    ))
SELECT tmid, ssid, ccnt,segid, pid, nid, tuplecount, nloops, ntuples
FROM all_entries
ORDER BY segid;
GRANT SELECT ON gp_instrument_shmem_detail TO public;
CREATE TABLE a (id int) DISTRIBUTED BY (id);
INSERT INTO a SELECT * FROM generate_series(1, 50);
SET OPTIMIZER=OFF;
ANALYZE a;
-- Expected result is 1 row, means only current query in instrument slots,
-- If more than one row returned, means previous test has leaked slots.
SELECT count(*) FROM (SELECT 1 FROM gp_instrument_shmem_detail GROUP BY ssid, ccnt) t;
 count 
-------
     1
(1 row)

-- regression to EXPLAN ANALZE
EXPLAIN ANALYZE SELECT 1/0;
ERROR:  division by zero
EXPLAIN ANALYZE SELECT count(*) FROM a where id < (1/(select count(*) where 1=0));
ERROR:  division by zero  (seg0 slice1 10.152.10.43:20000 pid=25058)
EXPLAIN ANALYZE SELECT count(*) FROM a a1, a a2, a a3;
                                                                         QUERY PLAN                                                                          
-------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=23614.53..23614.54 rows=1 width=8)
   ->  Gather Motion 9:1  (slice3; segments: 9)  (cost=23614.41..23614.51 rows=1 width=8)
         ->  Aggregate  (cost=23614.41..23614.42 rows=1 width=8)
               ->  Nested Loop  (cost=29.90..22989.40 rows=13889 width=0)
                     ->  Nested Loop  (cost=14.95..474.45 rows=278 width=0)
                           ->  Seq Scan on a a1  (cost=0.00..9.50 rows=6 width=0)
                           ->  Materialize  (cost=14.95..19.45 rows=50 width=0)
                                 ->  Broadcast Motion 9:9  (slice1; segments: 9)  (cost=0.00..14.50 rows=50 width=0)
                                       ->  Seq Scan on a a3  (cost=0.00..9.50 rows=6 width=0)
                     ->  Materialize  (cost=14.95..19.45 rows=50 width=0)
                           ->  Broadcast Motion 9:9  (slice2; segments: 9)  (cost=0.00..14.50 rows=50 width=0)
                                 ->  Seq Scan on a a2  (cost=0.00..9.50 rows=6 width=0)
 Slice statistics:
   (slice0)    Executor memory: 386K bytes.
   (slice1)    Executor memory: 248K bytes avg x 9 workers, 248K bytes max (seg0).
   (slice2)    Executor memory: 248K bytes avg x 9 workers, 248K bytes max (seg0).
   (slice3)    Executor memory: 311K bytes avg x 9 workers, 311K bytes max (seg0).
 Statement statistics:
   Memory used: 128000K bytes
 Settings:  optimizer=off
 Optimizer status: legacy query optimizer
 Total runtime: 129.936 ms
(34 rows)

EXPLAIN SELECT 1/0;
                QUERY PLAN                
------------------------------------------
 Result  (cost=0.00..0.01 rows=1 width=0)
 Settings:  optimizer=off
 Optimizer status: legacy query optimizer
(3 rows)

EXPLAIN SELECT count(*) FROM a where id < (1/(select count(*) where 1=0));
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Aggregate  (cost=10.00..10.01 rows=1 width=8)
   InitPlan 1 (returns $0)  (slice2)
     ->  Aggregate  (cost=0.02..0.03 rows=1 width=8)
           ->  Result  (cost=0.00..0.01 rows=1 width=0)
                 One-Time Filter: false
   ->  Gather Motion 9:1  (slice1; segments: 9)  (cost=9.84..9.95 rows=1 width=8)
         ->  Aggregate  (cost=9.84..9.85 rows=1 width=8)
               ->  Seq Scan on a  (cost=0.00..9.75 rows=2 width=0)
                     Filter: id < (1 / $0)
 Settings:  optimizer=off
 Optimizer status: legacy query optimizer
(11 rows)

EXPLAIN SELECT count(*) FROM a a1, a a2, a a3;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=23614.53..23614.54 rows=1 width=8)
   ->  Gather Motion 9:1  (slice3; segments: 9)  (cost=23614.41..23614.51 rows=1 width=8)
         ->  Aggregate  (cost=23614.41..23614.42 rows=1 width=8)
               ->  Nested Loop  (cost=29.90..22989.40 rows=13889 width=0)
                     ->  Nested Loop  (cost=14.95..474.45 rows=278 width=0)
                           ->  Seq Scan on a a1  (cost=0.00..9.50 rows=6 width=0)
                           ->  Materialize  (cost=14.95..19.45 rows=50 width=0)
                                 ->  Broadcast Motion 9:9  (slice1; segments: 9)  (cost=0.00..14.50 rows=50 width=0)
                                       ->  Seq Scan on a a3  (cost=0.00..9.50 rows=6 width=0)
                     ->  Materialize  (cost=14.95..19.45 rows=50 width=0)
                           ->  Broadcast Motion 9:9  (slice2; segments: 9)  (cost=0.00..14.50 rows=50 width=0)
                                 ->  Seq Scan on a a2  (cost=0.00..9.50 rows=6 width=0)
 Settings:  optimizer=off
 Optimizer status: legacy query optimizer
(14 rows)

-- Expected result is 1 row, means only current query in instrument slots,
-- If more than one row returned, means previous test has leaked slots.
SELECT count(*) FROM (SELECT 1 FROM gp_instrument_shmem_detail GROUP BY ssid, ccnt) t;
 count 
-------
     1
(1 row)

-- start_ignore
DROP SCHEMA IF EXISTS QUERY_METRICS CASCADE; 
NOTICE:  drop cascades to 7 other objects
DETAIL:  drop cascades to external table __gp_localid
drop cascades to external table __gp_masterid
drop cascades to function gp_instrument_shmem_summary_f()
drop cascades to view gp_instrument_shmem_summary
drop cascades to function gp_instrument_shmem_detail_f()
drop cascades to view gp_instrument_shmem_detail
drop cascades to table a
-- end_ignore
