set allow_system_table_mods=true;
-- Hash distributed tables
Create table t1_reshuffle(a int, b int, c int) distributed by (a);
update gp_distribution_policy  set numsegments=2 where localoid='t1_reshuffle'::regclass;
insert into t1_reshuffle select i,i,0 from generate_series(1,100) I;
Update t1_reshuffle set c = gp_segment_id;
Select gp_segment_id, count(*) from t1_reshuffle group by gp_segment_id;
 gp_segment_id | count 
---------------+-------
             1 |    51
             0 |    49
(2 rows)

begin;
Alter table t1_reshuffle set with (reshuffle);
Select gp_segment_id, count(*) from t1_reshuffle group by gp_segment_id;
 gp_segment_id | count 
---------------+-------
             1 |    40
             0 |    32
             2 |    28
(3 rows)

abort;
Select gp_segment_id, count(*) from t1_reshuffle group by gp_segment_id;
 gp_segment_id | count 
---------------+-------
             1 |    51
             0 |    49
(2 rows)

Alter table t1_reshuffle set with (reshuffle);
Select gp_segment_id, count(*) from t1_reshuffle group by gp_segment_id;
 gp_segment_id | count 
---------------+-------
             0 |    32
             1 |    40
             2 |    28
(3 rows)

select numsegments from gp_distribution_policy where localoid='t1_reshuffle'::regclass;
 numsegments 
-------------
           3
(1 row)

drop table t1_reshuffle;
Create table t1_reshuffle(a int, b int, c int) with OIDS distributed by (a,b);
NOTICE:  OIDS=TRUE is not recommended for user-created tables. Use OIDS=FALSE to prevent wrap-around of the OID counter
update gp_distribution_policy  set numsegments=1 where localoid='t1_reshuffle'::regclass;
insert into t1_reshuffle select i,i,0 from generate_series(1,100) I;
Update t1_reshuffle set c = gp_segment_id;
Select gp_segment_id, count(*) from t1_reshuffle group by gp_segment_id;
 gp_segment_id | count 
---------------+-------
             0 |   100
(1 row)

begin;
Alter table t1_reshuffle set with (reshuffle);
Select gp_segment_id, count(*) from t1_reshuffle group by gp_segment_id;
 gp_segment_id | count 
---------------+-------
             0 |    31
             1 |    35
             2 |    34
(3 rows)

abort;
Select gp_segment_id, count(*) from t1_reshuffle group by gp_segment_id;
 gp_segment_id | count 
---------------+-------
             0 |   100
(1 row)

Alter table t1_reshuffle set with (reshuffle);
Select gp_segment_id, count(*) from t1_reshuffle group by gp_segment_id;
 gp_segment_id | count 
---------------+-------
             0 |    31
             2 |    34
             1 |    35
(3 rows)

select numsegments from gp_distribution_policy where localoid='t1_reshuffle'::regclass;
 numsegments 
-------------
           3
(1 row)

drop table t1_reshuffle;
-- Test NULLs.
Create table t1_reshuffle(a int, b int, c int) distributed by (a,b,c);
update gp_distribution_policy  set numsegments=2 where localoid='t1_reshuffle'::regclass;
insert into t1_reshuffle values
  (1,    1,    1   ),
  (null, 2,    2   ),
  (3,    null, 3   ),
  (4,    4,    null),
  (null, null, 5   ),
  (null, 6,    null),
  (7,    null, null),
  (null, null, null);
Select gp_segment_id, count(*) from t1_reshuffle group by gp_segment_id;
 gp_segment_id | count 
---------------+-------
             1 |     4
             0 |     4
(2 rows)

begin;
Alter table t1_reshuffle set with (reshuffle);
Select gp_segment_id, count(*) from t1_reshuffle group by gp_segment_id;
 gp_segment_id | count 
---------------+-------
             2 |     3
             1 |     3
             0 |     2
(3 rows)

abort;
Select gp_segment_id, count(*) from t1_reshuffle group by gp_segment_id;
 gp_segment_id | count 
---------------+-------
             1 |     4
             0 |     4
(2 rows)

Alter table t1_reshuffle set with (reshuffle);
Select gp_segment_id, count(*) from t1_reshuffle group by gp_segment_id;
 gp_segment_id | count 
---------------+-------
             2 |     3
             0 |     2
             1 |     3
(3 rows)

select numsegments from gp_distribution_policy where localoid='t1_reshuffle'::regclass;
 numsegments 
-------------
           3
(1 row)

drop table t1_reshuffle;
Create table t1_reshuffle(a int, b int, c int) distributed by (a) partition by list(b) (partition t1_reshuffle_1 values(1), partition t1_reshuffle_2 values(2), default partition other);
NOTICE:  CREATE TABLE will create partition "t1_reshuffle_1_prt_t1_reshuffle_1" for table "t1_reshuffle"
NOTICE:  CREATE TABLE will create partition "t1_reshuffle_1_prt_t1_reshuffle_2" for table "t1_reshuffle"
NOTICE:  CREATE TABLE will create partition "t1_reshuffle_1_prt_other" for table "t1_reshuffle"
update gp_distribution_policy set numsegments = 1 where localoid='t1_reshuffle_1_prt_t1_reshuffle_1'::regclass;
update gp_distribution_policy set numsegments = 1 where localoid='t1_reshuffle_1_prt_t1_reshuffle_2'::regclass;
update gp_distribution_policy set numsegments = 1 where localoid='t1_reshuffle_1_prt_other'::regclass;
update gp_distribution_policy set numsegments = 1 where localoid='t1_reshuffle'::regclass;
insert into t1_reshuffle select i,i,0 from generate_series(1,100) I;
Select gp_segment_id, count(*) from t1_reshuffle group by gp_segment_id;
 gp_segment_id | count 
---------------+-------
             0 |   100
(1 row)

begin;
Alter table t1_reshuffle set with (reshuffle);
Select gp_segment_id, count(*) from t1_reshuffle group by gp_segment_id;
 gp_segment_id | count 
---------------+-------
             0 |    32
             2 |    28
             1 |    40
(3 rows)

abort;
Select gp_segment_id, count(*) from t1_reshuffle group by gp_segment_id;
 gp_segment_id | count 
---------------+-------
             0 |   100
(1 row)

Alter table t1_reshuffle set with (reshuffle);
Select gp_segment_id, count(*) from t1_reshuffle group by gp_segment_id;
 gp_segment_id | count 
---------------+-------
             2 |    28
             0 |    32
             1 |    40
(3 rows)

select numsegments from gp_distribution_policy where localoid='t1_reshuffle'::regclass;
 numsegments 
-------------
           3
(1 row)

drop table t1_reshuffle;
-- Random distributed tables
Create table r1_reshuffle(a int, b int, c int) distributed randomly;
update gp_distribution_policy  set numsegments=2 where localoid='r1_reshuffle'::regclass;
insert into r1_reshuffle select i,i,0 from generate_series(1,100) I;
Update r1_reshuffle set c = gp_segment_id;
Select count(*) from r1_reshuffle;
 count 
-------
   100
(1 row)

Select count(*) > 0 from r1_reshuffle where gp_segment_id=2;
 ?column? 
----------
 f
(1 row)

begin;
Alter table r1_reshuffle set with (reshuffle);
Select count(*) from r1_reshuffle;
 count 
-------
   100
(1 row)

Select count(*) > 0 from r1_reshuffle where gp_segment_id=2;
 ?column? 
----------
 t
(1 row)

abort;
Select count(*) from r1_reshuffle;
 count 
-------
   100
(1 row)

Select count(*) > 0 from r1_reshuffle where gp_segment_id=2;
 ?column? 
----------
 f
(1 row)

Alter table r1_reshuffle set with (reshuffle);
Select count(*) from r1_reshuffle;
 count 
-------
   100
(1 row)

Select count(*) > 0 from r1_reshuffle where gp_segment_id=2;
 ?column? 
----------
 t
(1 row)

select numsegments from gp_distribution_policy where localoid='r1_reshuffle'::regclass;
 numsegments 
-------------
           3
(1 row)

drop table r1_reshuffle;
Create table r1_reshuffle(a int, b int, c int) with OIDS distributed randomly;
NOTICE:  OIDS=TRUE is not recommended for user-created tables. Use OIDS=FALSE to prevent wrap-around of the OID counter
update gp_distribution_policy  set numsegments=2 where localoid='r1_reshuffle'::regclass;
insert into r1_reshuffle select i,i,0 from generate_series(1,100) I;
Update r1_reshuffle set c = gp_segment_id;
Select count(*) from r1_reshuffle;
 count 
-------
   100
(1 row)

Select count(*) > 0 from r1_reshuffle where gp_segment_id=2;
 ?column? 
----------
 f
(1 row)

begin;
Alter table r1_reshuffle set with (reshuffle);
Select count(*) from r1_reshuffle;
 count 
-------
   100
(1 row)

Select count(*) > 0 from r1_reshuffle where gp_segment_id=2;
 ?column? 
----------
 t
(1 row)

abort;
Select count(*) from r1_reshuffle;
 count 
-------
   100
(1 row)

Select count(*) > 0 from r1_reshuffle where gp_segment_id=2;
 ?column? 
----------
 f
(1 row)

Alter table r1_reshuffle set with (reshuffle);
Select count(*) from r1_reshuffle;
 count 
-------
   100
(1 row)

Select count(*) > 0 from r1_reshuffle where gp_segment_id=2;
 ?column? 
----------
 t
(1 row)

select numsegments from gp_distribution_policy where localoid='r1_reshuffle'::regclass;
 numsegments 
-------------
           3
(1 row)

drop table r1_reshuffle;
Create table r1_reshuffle(a int, b int, c int) distributed randomly partition by list(b) (partition r1_reshuffle_1 values(1), partition r1_reshuffle_2 values(2), default partition other);
NOTICE:  CREATE TABLE will create partition "r1_reshuffle_1_prt_r1_reshuffle_1" for table "r1_reshuffle"
NOTICE:  CREATE TABLE will create partition "r1_reshuffle_1_prt_r1_reshuffle_2" for table "r1_reshuffle"
NOTICE:  CREATE TABLE will create partition "r1_reshuffle_1_prt_other" for table "r1_reshuffle"
update gp_distribution_policy set numsegments = 2 where localoid='r1_reshuffle_1_prt_r1_reshuffle_1'::regclass;
update gp_distribution_policy set numsegments = 2 where localoid='r1_reshuffle_1_prt_r1_reshuffle_2'::regclass;
update gp_distribution_policy set numsegments = 2 where localoid='r1_reshuffle_1_prt_other'::regclass;
update gp_distribution_policy set numsegments = 2 where localoid='r1_reshuffle'::regclass;
insert into r1_reshuffle select i,i,0 from generate_series(1,100) I;
Select count(*) from r1_reshuffle;
 count 
-------
   100
(1 row)

Select count(*) > 0 from r1_reshuffle where gp_segment_id=2;
 ?column? 
----------
 f
(1 row)

begin;
Alter table r1_reshuffle set with (reshuffle);
Select count(*) from r1_reshuffle;
 count 
-------
   100
(1 row)

Select count(*) > 0 from r1_reshuffle where gp_segment_id=2;
 ?column? 
----------
 t
(1 row)

abort;
Select count(*) from r1_reshuffle;
 count 
-------
   100
(1 row)

Select count(*) > 0 from r1_reshuffle where gp_segment_id=2;
 ?column? 
----------
 f
(1 row)

Alter table r1_reshuffle set with (reshuffle);
Select count(*) from r1_reshuffle;
 count 
-------
   100
(1 row)

Select count(*) > 0 from r1_reshuffle where gp_segment_id=2;
 ?column? 
----------
 t
(1 row)

select numsegments from gp_distribution_policy where localoid='r1_reshuffle'::regclass;
 numsegments 
-------------
           3
(1 row)

drop table r1_reshuffle;
-- Replicated tables
-- We have to make sure replicated table successfully reshuffled.
Create table r1_reshuffle(a int, b int, c int) distributed replicated;
select update_numsegments_in_policy('r1_reshuffle', 1);
 update_numsegments_in_policy 
------------------------------
 
(1 row)

insert into r1_reshuffle select i,i,0 from generate_series(1,100) I;
Select count(*) from r1_reshuffle;
 count 
-------
   100
(1 row)

Select gp_execute_on_server(1, 'Select count(*) from r1_reshuffle;');
 gp_execute_on_server 
----------------------
 0
(1 row)

Select gp_execute_on_server(2, 'Select count(*) from r1_reshuffle;');
 gp_execute_on_server 
----------------------
 0
(1 row)

begin;
Alter table r1_reshuffle set with (reshuffle);
Select count(*) from r1_reshuffle;
 count 
-------
   100
(1 row)

abort;
Select count(*) from r1_reshuffle;
 count 
-------
   100
(1 row)

Select gp_execute_on_server(1, 'Select count(*) from r1_reshuffle;');
 gp_execute_on_server 
----------------------
 0
(1 row)

Select gp_execute_on_server(2, 'Select count(*) from r1_reshuffle;');
 gp_execute_on_server 
----------------------
 0
(1 row)

Alter table r1_reshuffle set with (reshuffle);
Select count(*) from r1_reshuffle;
 count 
-------
   100
(1 row)

Select gp_execute_on_server(1, 'Select count(*) from r1_reshuffle;');
 gp_execute_on_server 
----------------------
 100
(1 row)

Select gp_execute_on_server(2, 'Select count(*) from r1_reshuffle;');
 gp_execute_on_server 
----------------------
 100
(1 row)

select numsegments from gp_distribution_policy where localoid='r1_reshuffle'::regclass;
 numsegments 
-------------
           3
(1 row)

drop table r1_reshuffle;
Create table r1_reshuffle(a int, b int, c int) with OIDS distributed replicated;
NOTICE:  OIDS=TRUE is not recommended for user-created tables. Use OIDS=FALSE to prevent wrap-around of the OID counter
select update_numsegments_in_policy('r1_reshuffle', 2);
 update_numsegments_in_policy 
------------------------------
 
(1 row)

insert into r1_reshuffle select i,i,0 from generate_series(1,100) I;
Select count(*) from r1_reshuffle;
 count 
-------
   100
(1 row)

Select gp_execute_on_server(1, 'Select count(*) from r1_reshuffle;');
 gp_execute_on_server 
----------------------
 100
(1 row)

Select gp_execute_on_server(2, 'Select count(*) from r1_reshuffle;');
 gp_execute_on_server 
----------------------
 0
(1 row)

begin;
Alter table r1_reshuffle set with (reshuffle);
Select count(*) from r1_reshuffle;
 count 
-------
   100
(1 row)

abort;
Select count(*) from r1_reshuffle;
 count 
-------
   100
(1 row)

Select gp_execute_on_server(1, 'Select count(*) from r1_reshuffle;');
 gp_execute_on_server 
----------------------
 100
(1 row)

Select gp_execute_on_server(2, 'Select count(*) from r1_reshuffle;');
 gp_execute_on_server 
----------------------
 0
(1 row)

Alter table r1_reshuffle set with (reshuffle);
Select count(*) from r1_reshuffle;
 count 
-------
   100
(1 row)

Select gp_execute_on_server(1, 'Select count(*) from r1_reshuffle;');
 gp_execute_on_server 
----------------------
 100
(1 row)

Select gp_execute_on_server(2, 'Select count(*) from r1_reshuffle;');
 gp_execute_on_server 
----------------------
 100
(1 row)

select numsegments from gp_distribution_policy where localoid='r1_reshuffle'::regclass;
 numsegments 
-------------
           3
(1 row)

drop table r1_reshuffle;
-- table with update triggers on distributed key column
CREATE OR REPLACE FUNCTION trigger_func() RETURNS trigger LANGUAGE plpgsql AS '
BEGIN
	RAISE NOTICE ''trigger_func(%) called: action = %, when = %, level = %'', TG_ARGV[0], TG_OP, TG_WHEN, TG_LEVEL;
	RETURN NULL;
END;';
CREATE TABLE table_with_update_trigger(a int, b int, c int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
update gp_distribution_policy set numsegments=2 where localoid='table_with_update_trigger'::regclass;
insert into table_with_update_trigger select i,i,0 from generate_series(1,100) I;
select gp_segment_id, count(*) from table_with_update_trigger group by 1 order by 1;
 gp_segment_id | count 
---------------+-------
             0 |    49
             1 |    51
(2 rows)

CREATE TRIGGER foo_br_trigger BEFORE INSERT OR UPDATE OR DELETE ON table_with_update_trigger 
FOR EACH ROW EXECUTE PROCEDURE trigger_func('before_stmt');
CREATE TRIGGER foo_ar_trigger AFTER INSERT OR UPDATE OR DELETE ON table_with_update_trigger 
FOR EACH ROW EXECUTE PROCEDURE trigger_func('before_stmt');
CREATE TRIGGER foo_bs_trigger BEFORE INSERT OR UPDATE OR DELETE ON table_with_update_trigger 
FOR EACH STATEMENT EXECUTE PROCEDURE trigger_func('before_stmt');
CREATE TRIGGER foo_as_trigger AFTER INSERT OR UPDATE OR DELETE ON table_with_update_trigger 
FOR EACH STATEMENT EXECUTE PROCEDURE trigger_func('before_stmt');
-- update should fail
update table_with_update_trigger set a = a + 1;
ERROR:  UPDATE on distributed key column not allowed on relation with update triggers
-- reshuffle should success and not hiting any triggers.
Alter table table_with_update_trigger set with (reshuffle);
select gp_segment_id, count(*) from table_with_update_trigger group by 1 order by 1;
 gp_segment_id | count 
---------------+-------
             0 |    32
             1 |    40
             2 |    28
(3 rows)

--
-- Test reshuffle inheritance parent table, parent table has different numsegments with
-- child tables.
--
create table mix_base_tbl (a int4, b int4) distributed by (a);
update gp_distribution_policy  set numsegments=2 where localoid='mix_base_tbl'::regclass;
insert into mix_base_tbl select g, g from generate_series(1, 3) g;
create table mix_child_a (a int4, b int4) inherits (mix_base_tbl) distributed by (a);
NOTICE:  merging column "a" with inherited definition
NOTICE:  merging column "b" with inherited definition
insert into mix_child_a select g, g from generate_series(11, 13) g;
create table mix_child_b (a int4, b int4) inherits (mix_base_tbl) distributed by (b);
NOTICE:  merging column "a" with inherited definition
NOTICE:  merging column "b" with inherited definition
update gp_distribution_policy  set numsegments=2 where localoid='mix_child_b'::regclass;
insert into mix_child_b select g, g from generate_series(21, 23) g;
select gp_segment_id, * from mix_base_tbl order by 2, 1;
 gp_segment_id | a  | b  
---------------+----+----
             0 |  1 |  1
             1 |  2 |  2
             1 |  3 |  3
             0 | 11 | 11
             1 | 12 | 12
             2 | 13 | 13
             0 | 21 | 21
             1 | 22 | 22
             0 | 23 | 23
(9 rows)

-- update distributed column, numsegments does not change
update mix_base_tbl set a=a+1;
select gp_segment_id, * from mix_base_tbl order by 2, 1;
 gp_segment_id | a  | b  
---------------+----+----
             1 |  2 |  1
             1 |  3 |  2
             0 |  4 |  3
             1 | 12 | 11
             2 | 13 | 12
             2 | 14 | 13
             0 | 22 | 21
             1 | 23 | 22
             0 | 24 | 23
(9 rows)

-- reshuffle the parent table, both parent and child table will be rebalanced to all
-- segments
Alter table mix_base_tbl set with (reshuffle);
NOTICE:  Do not need to reshuffle public.mix_child_a
select gp_segment_id, * from mix_base_tbl order by 2, 1;
 gp_segment_id | a  | b  
---------------+----+----
             1 |  2 |  1
             2 |  3 |  2
             0 |  4 |  3
             1 | 12 | 11
             2 | 13 | 12
             2 | 14 | 13
             0 | 22 | 21
             1 | 23 | 22
             2 | 24 | 23
(9 rows)

