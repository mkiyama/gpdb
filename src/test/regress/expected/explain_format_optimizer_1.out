-- start_matchsubs
-- m/\(actual time=\d+\.\d+..\d+\.\d+ rows=\d+ loops=\d+\)/
-- s/\(actual time=\d+\.\d+..\d+\.\d+ rows=\d+ loops=\d+\)/(actual time=##.###..##.### rows=# loops=#)/
-- m/\(slice\d+\)    Executor memory: (\d+)\w bytes\./
-- s/Executor memory: (\d+)\w bytes\./Executor memory: (#####)K bytes./
-- m/\(slice\d+\)    Executor memory: (\d+)\w bytes avg x \d+ workers, \d+\w bytes max \(seg\d+\)\./
-- s/Executor memory: (\d+)\w bytes avg x \d+ workers, \d+\w bytes max \(seg\d+\)\./Executor memory: ####K bytes avg x #### workers, ####K bytes max (seg#)./
-- m/Work_mem: \d+\w bytes max\./
-- s/Work_mem: \d+\w bytes max\. */Work_mem: ###K bytes max./
-- m/Execution time: \d+\.\d+ ms/
-- s/Execution time: \d+\.\d+ ms/Execution time: ##.### ms/
-- m/Planning time: \d+\.\d+ ms/
-- s/Planning time: \d+\.\d+ ms/Planning time: ##.### ms/
-- m/cost=\d+\.\d+\.\.\d+\.\d+ rows=\d+ width=\d+/
-- s/\(cost=\d+\.\d+\.\.\d+\.\d+ rows=\d+ width=\d+\)/(cost=##.###..##.### rows=### width=###)/
-- m/Peak memory: \d+\w? bytes\./
-- s/Peak memory: \d+\w? bytes\./Peak memory: ### bytes./
-- m/Peak memory: \d+\w? bytes avg x \d+ workers, \d+\w? bytes max \(seg\d+\)./
-- s/Peak memory: \d+\w? bytes avg x \d+ workers, \d+\w? bytes max \(seg\d+\)\./Peak memory: ### bytes avg x # workers, ### bytes max (seg#)./
-- m/Vmem reserved: \d+\w? bytes\./
-- s/Vmem reserved: \d+\w? bytes\./Vmem reserved: ### bytes./
-- m/Vmem reserved: \d+\w? bytes avg x \d+ workers, \d+\w? bytes max \(seg\d+\)/
-- s/Vmem reserved: \d+\w? bytes avg x \d+ workers, \d+\w? bytes max \(seg\d+\)/Vmem reserved: ### bytes avg x # workers, ### bytes max (seg#)/
-- m/Total memory used across slices: \d+\w bytes./
-- s/Total memory used across slices: \d+\w bytes./Total memory used across slices: ### bytes./
-- m/Memory used:  \d+\w?B/
-- s/Memory used:  \d+\w?B/Memory used: ###B/
-- m/ORCA Memory used: peak \d+\w?B  allocated \d+\w?B  freed \d+\w?B/
-- s/ORCA Memory used: peak \d+\w?B  allocated \d+\w?B  freed \d+\w?B/ORCA Memory used: peak ##B  allocated ##B  freed ##B/
-- end_matchsubs
--
-- DEFAULT syntax
CREATE TABLE apples(id int PRIMARY KEY, type text);
INSERT INTO apples(id) SELECT generate_series(1, 100000);
CREATE TABLE box_locations(id int PRIMARY KEY, address text);
CREATE TABLE boxes(id int PRIMARY KEY, apple_id int REFERENCES apples(id), location_id int REFERENCES box_locations(id));
WARNING:  referential integrity (FOREIGN KEY) constraints are not supported in Greenplum Database, will not be enforced
WARNING:  referential integrity (FOREIGN KEY) constraints are not supported in Greenplum Database, will not be enforced
-- Activate GUC that will show more memory information
SET explain_memory_verbosity = 'summary';
--- Check Explain Text format output
-- explain_processing_off
EXPLAIN SELECT * from boxes LEFT JOIN apples ON apples.id = boxes.apple_id LEFT JOIN box_locations ON box_locations.id = boxes.location_id;
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice3; segments: 3)  (cost=0.00..449.00 rows=3 width=28)
   ->  Nested Loop Left Join  (cost=0.00..449.00 rows=1 width=28)
         Join Filter: true
         ->  Redistribute Motion 3:3  (slice2; segments: 3)  (cost=0.00..437.00 rows=1 width=16)
               Hash Key: boxes.location_id
               ->  Nested Loop Left Join  (cost=0.00..437.00 rows=1 width=16)
                     Join Filter: true
                     ->  Redistribute Motion 3:3  (slice1; segments: 3)  (cost=0.00..431.00 rows=1 width=12)
                           Hash Key: boxes.apple_id
                           ->  Table Scan on boxes  (cost=0.00..431.00 rows=1 width=12)
                     ->  Index Scan using apples_pkey on apples  (cost=0.00..6.00 rows=1 width=4)
                           Index Cond: (id = boxes.apple_id)
         ->  Index Scan using box_locations_pkey on box_locations  (cost=0.00..12.00 rows=1 width=12)
               Index Cond: (id = boxes.location_id)
 Planning time: 287.221 ms
 Optimizer: PQO version 3.2.0
(16 rows)

-- explain_processing_on
--- Check Explain Analyze Text output that include the slices information
-- explain_processing_off
EXPLAIN (ANALYZE) SELECT * from boxes LEFT JOIN apples ON apples.id = boxes.apple_id LEFT JOIN box_locations ON box_locations.id = boxes.location_id;
                                                                                                     QUERY PLAN                                                                                                      
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice3; segments: 3)  (cost=0.00..449.00 rows=3 width=28) (actual time=1.358..1.358 rows=0 loops=2)
   ->  Nested Loop Left Join  (cost=0.00..449.00 rows=1 width=28) (actual time=0.000..2.211 rows=0 loops=1)
         Join Filter: true
         ->  Redistribute Motion 3:3  (slice2; segments: 3)  (cost=0.00..437.00 rows=1 width=16) (actual time=0.000..2.204 rows=0 loops=1)
               Hash Key: boxes.location_id
               ->  Nested Loop Left Join  (cost=0.00..437.00 rows=1 width=16) (actual time=0.000..1.128 rows=0 loops=1)
                     Join Filter: true
                     ->  Redistribute Motion 3:3  (slice1; segments: 3)  (cost=0.00..431.00 rows=1 width=12) (actual time=0.000..1.122 rows=0 loops=1)
                           Hash Key: boxes.apple_id
                           ->  Table Scan on boxes  (cost=0.00..431.00 rows=1 width=12) (actual time=0.000..0.016 rows=0 loops=1)
                     ->  Index Scan using apples_pkey on apples  (cost=0.00..6.00 rows=1 width=4) (never executed)
                           Index Cond: (id = boxes.apple_id)
         ->  Index Scan using box_locations_pkey on box_locations  (cost=0.00..12.00 rows=1 width=12) (never executed)
               Index Cond: (id = boxes.location_id)
 Planning time: 180.601 ms
   (slice0)    Executor memory: 450K bytes.  Peak memory: 11382K bytes.  Vmem reserved: 11264K bytes.
   (slice1)    Executor memory: 66K bytes avg x 3 workers, 66K bytes max (seg0).  Peak memory: 1K bytes avg x 3 workers, 636K bytes max (seg0).  Vmem reserved: 1024K bytes avg x 3 workers, 1024K bytes max (seg0).
   (slice2)    Executor memory: 66K bytes avg x 3 workers, 66K bytes max (seg0).  Peak memory: 1K bytes avg x 3 workers, 661K bytes max (seg0).  Vmem reserved: 1024K bytes avg x 3 workers, 1024K bytes max (seg0).
   (slice3)    Executor memory: 98K bytes avg x 3 workers, 98K bytes max (seg0).  Peak memory: 1K bytes avg x 3 workers, 820K bytes max (seg0).  Vmem reserved: 1024K bytes avg x 3 workers, 1024K bytes max (seg0).
   (slice4)    
   (slice5)    
 Total memory used across slices: 17733K bytes 
 Memory used:  128000kB
 ORCA Memory used: peak 11kB  allocated 11kB  freed 11kB
 Optimizer: PQO version 3.2.0
 Execution time: 20.211 ms
(26 rows)

-- explain_processing_on
-- Unaligned output format is better for the YAML / XML / JSON outputs.
-- In aligned format, you have end-of-line markers at the end of each line,
-- and its position depends on the longest line. If the width changes, all
-- lines need to be adjusted for the moved end-of-line-marker.
\a
-- YAML Required replaces for costs and time changes
-- start_matchsubs
-- m/ Loops: \d+/
-- s/ Loops: \d+/ Loops: #/
-- m/ Cost: \d+\.\d+/
-- s/ Cost: \d+\.\d+/ Cost: ###.##/
-- m/ Rows: \d+/
-- s/ Rows: \d+/ Rows: #####/
-- m/ Plan Width: \d+/
-- s/ Plan Width: \d+/ Plan Width: ##/
-- m/ Time: \d+\.\d+/
-- s/ Time: \d+\.\d+/ Time: ##.###/
-- m/Execution Time: \d+\.\d+/
-- s/Execution Time: \d+\.\d+/Execution Time: ##.###/
-- m/Segments: \d+/
-- s/Segments: \d+/Segments: #/
-- m/PQO version \d+\.\d+\.\d+",?/
-- s/PQO version \d+\.\d+\.\d+",?/PQO version ##.##.##"/
-- m/ Memory: \d+/
-- s/ Memory: \d+/ Memory: ###/
-- m/Maximum Memory Used: \d+/
-- s/Maximum Memory Used: \d+/Maximum Memory Used: ###/
-- m/Work Maximum Memory: \d+/
-- s/Work Maximum Memory: \d+/Work Maximum Memory: ###/
-- m/Workers: \d+/
-- s/Workers: \d+/Workers: ##/
-- m/Average: \d+/
-- s/Average: \d+/Average: ##/
-- m/Total memory used across slices: \d+/
-- s/Total memory used across slices: \d+\s*/Total memory used across slices: ###/
-- m/Memory used: \d+/
-- s/Memory used: \d+/Memory used: ###/
-- m/ORCA Memory Used \w+: \d+/
-- s/ORCA Memory Used (\w+): \d+\s+/ORCA Memory Used $1: ##/
-- end_matchsubs
-- Check Explain YAML output
EXPLAIN (FORMAT YAML) SELECT * from boxes LEFT JOIN apples ON apples.id = boxes.apple_id LEFT JOIN box_locations ON box_locations.id = boxes.location_id;
QUERY PLAN
- Plan: 
    Node Type: "Gather Motion"
    Senders: 3
    Receivers: 1
    Slice: 3
    Segments: 3
    Gang Type: "primary reader"
    Startup Cost: 0.00
    Total Cost: 449.00
    Plan Rows: 3
    Plan Width: 28
    Plans: 
      - Node Type: "Nested Loop"
        Parent Relationship: "Outer"
        Slice: 3
        Segments: 3
        Gang Type: "primary reader"
        Join Type: "Left"
        Startup Cost: 0.00
        Total Cost: 449.00
        Plan Rows: 3
        Plan Width: 28
        Join Filter: "true"
        Plans: 
          - Node Type: "Redistribute Motion"
            Senders: 3
            Receivers: 3
            Parent Relationship: "Outer"
            Slice: 2
            Segments: 3
            Gang Type: "primary reader"
            Startup Cost: 0.00
            Total Cost: 437.00
            Plan Rows: 2
            Plan Width: 16
            Hash Key: "boxes.location_id"
            Plans: 
              - Node Type: "Nested Loop"
                Parent Relationship: "Outer"
                Slice: 2
                Segments: 3
                Gang Type: "primary reader"
                Join Type: "Left"
                Startup Cost: 0.00
                Total Cost: 437.00
                Plan Rows: 2
                Plan Width: 16
                Join Filter: "true"
                Plans: 
                  - Node Type: "Redistribute Motion"
                    Senders: 3
                    Receivers: 3
                    Parent Relationship: "Outer"
                    Slice: 1
                    Segments: 3
                    Gang Type: "primary reader"
                    Startup Cost: 0.00
                    Total Cost: 431.00
                    Plan Rows: 1
                    Plan Width: 12
                    Hash Key: "boxes.apple_id"
                    Plans: 
                      - Node Type: "Table Scan"
                        Parent Relationship: "Outer"
                        Slice: 1
                        Segments: 3
                        Gang Type: "primary reader"
                        Relation Name: "boxes"
                        Alias: "boxes"
                        Startup Cost: 0.00
                        Total Cost: 431.00
                        Plan Rows: 1
                        Plan Width: 12
                  - Node Type: "Index Scan"
                    Parent Relationship: "Inner"
                    Slice: 2
                    Segments: 3
                    Gang Type: "primary reader"
                    Scan Direction: "Forward"
                    Index Name: "apples_pkey"
                    Relation Name: "apples"
                    Alias: "apples"
                    Startup Cost: 0.00
                    Total Cost: 6.00
                    Plan Rows: 1
                    Plan Width: 4
                    Index Cond: "(id = boxes.apple_id)"
          - Node Type: "Index Scan"
            Parent Relationship: "Inner"
            Slice: 3
            Segments: 3
            Gang Type: "primary reader"
            Scan Direction: "Forward"
            Index Name: "box_locations_pkey"
            Relation Name: "box_locations"
            Alias: "box_locations"
            Startup Cost: 0.00
            Total Cost: 12.00
            Plan Rows: 0
            Plan Width: 12
            Index Cond: "(id = boxes.location_id)"
  Planning Time: 182.846
  Settings: 
    Optimizer: "PQO version 3.2.0"
(1 row)
--- Check Explain Analyze YAML output that include the slices information
-- explain_processing_off
EXPLAIN (ANALYZE, FORMAT YAML) SELECT * from boxes LEFT JOIN apples ON apples.id = boxes.apple_id LEFT JOIN box_locations ON box_locations.id = boxes.location_id;
QUERY PLAN
- Plan: 
    Node Type: "Gather Motion"
    Senders: 3
    Receivers: 1
    Slice: 3
    Segments: 3
    Gang Type: "primary reader"
    Startup Cost: 0.00
    Total Cost: 449.00
    Plan Rows: 3
    Plan Width: 28
    Actual Startup Time: 1.252
    Actual Total Time: 1.252
    Actual Rows: 0
    Actual Loops: 2
    Plans: 
      - Node Type: "Nested Loop"
        Parent Relationship: "Outer"
        Slice: 3
        Segments: 3
        Gang Type: "primary reader"
        Join Type: "Left"
        Startup Cost: 0.00
        Total Cost: 449.00
        Plan Rows: 3
        Plan Width: 28
        Actual Startup Time: 0.000
        Actual Total Time: 2.037
        Actual Rows: 0
        Actual Loops: 1
        Join Filter: "true"
        Rows Removed by Join Filter: 0
        Plans: 
          - Node Type: "Redistribute Motion"
            Senders: 3
            Receivers: 3
            Parent Relationship: "Outer"
            Slice: 2
            Segments: 3
            Gang Type: "primary reader"
            Startup Cost: 0.00
            Total Cost: 437.00
            Plan Rows: 2
            Plan Width: 16
            Actual Startup Time: 0.000
            Actual Total Time: 2.030
            Actual Rows: 0
            Actual Loops: 1
            Hash Key: "boxes.location_id"
            Plans: 
              - Node Type: "Nested Loop"
                Parent Relationship: "Outer"
                Slice: 2
                Segments: 3
                Gang Type: "primary reader"
                Join Type: "Left"
                Startup Cost: 0.00
                Total Cost: 437.00
                Plan Rows: 2
                Plan Width: 16
                Actual Startup Time: 0.000
                Actual Total Time: 0.008
                Actual Rows: 0
                Actual Loops: 1
                Join Filter: "true"
                Rows Removed by Join Filter: 0
                Plans: 
                  - Node Type: "Redistribute Motion"
                    Senders: 3
                    Receivers: 3
                    Parent Relationship: "Outer"
                    Slice: 1
                    Segments: 3
                    Gang Type: "primary reader"
                    Startup Cost: 0.00
                    Total Cost: 431.00
                    Plan Rows: 1
                    Plan Width: 12
                    Actual Startup Time: 0.000
                    Actual Total Time: 0.005
                    Actual Rows: 0
                    Actual Loops: 1
                    Hash Key: "boxes.apple_id"
                    Plans: 
                      - Node Type: "Table Scan"
                        Parent Relationship: "Outer"
                        Slice: 1
                        Segments: 3
                        Gang Type: "primary reader"
                        Relation Name: "boxes"
                        Alias: "boxes"
                        Startup Cost: 0.00
                        Total Cost: 431.00
                        Plan Rows: 1
                        Plan Width: 12
                        Actual Startup Time: 0.000
                        Actual Total Time: 0.014
                        Actual Rows: 0
                        Actual Loops: 1
                  - Node Type: "Index Scan"
                    Parent Relationship: "Inner"
                    Slice: 2
                    Segments: 3
                    Gang Type: "primary reader"
                    Scan Direction: "Forward"
                    Index Name: "apples_pkey"
                    Relation Name: "apples"
                    Alias: "apples"
                    Startup Cost: 0.00
                    Total Cost: 6.00
                    Plan Rows: 1
                    Plan Width: 4
                    Actual Startup Time: 0.000
                    Actual Total Time: 0.000
                    Actual Rows: 0
                    Actual Loops: 0
                    Index Cond: "(id = boxes.apple_id)"
                    Rows Removed by Index Recheck: 0
          - Node Type: "Index Scan"
            Parent Relationship: "Inner"
            Slice: 3
            Segments: 3
            Gang Type: "primary reader"
            Scan Direction: "Forward"
            Index Name: "box_locations_pkey"
            Relation Name: "box_locations"
            Alias: "box_locations"
            Startup Cost: 0.00
            Total Cost: 12.00
            Plan Rows: 0
            Plan Width: 12
            Actual Startup Time: 0.000
            Actual Total Time: 0.000
            Actual Rows: 0
            Actual Loops: 0
            Index Cond: "(id = boxes.location_id)"
            Rows Removed by Index Recheck: 0
  Planning Time: 176.176
  Triggers: 
  Slice statistics: 
    - Slice: 0
      Executor Memory: 460304
      Global Peak Memory: 11662520
      Virtual Memory: 11534336
    - Slice: 1
      Executor Memory: 
        Average: 66728
        Workers: 3
        Maximum Memory Used: 66728
      Global Peak Memory: 
        Average: 652605
        Workers: 3
        Maximum Memory Used: 652648
      Virtual Memory: 
        Average: 1048576
        Workers: 3
        Maximum Memory Used: 1048576
    - Slice: 2
      Executor Memory: 
        Average: 99496
        Workers: 3
        Maximum Memory Used: 99496
      Global Peak Memory: 
        Average: 678077
        Workers: 3
        Maximum Memory Used: 678120
      Virtual Memory: 
        Average: 1048576
        Workers: 3
        Maximum Memory Used: 1048576
    - Slice: 3
      Executor Memory: 
        Average: 99496
        Workers: 3
        Maximum Memory Used: 99496
      Global Peak Memory: 
        Average: 839605
        Workers: 3
        Maximum Memory Used: 839648
      Virtual Memory: 
        Average: 1048576
        Workers: 3
        Maximum Memory Used: 1048576
    - Slice: 4
    - Slice: 5
  Total memory used across slices: 13511
  Statement statistics: 
    Memory used: 128000
    ORCA Memory Used Peak: 11
    ORCA Memory Used Allocated: 11
    ORCA Memory Used Freed: 11
  Settings: 
    Optimizer: "PQO version 3.2.0"
  Execution Time: 3.628
(1 row)
-- explain_processing_on
--
-- Test a simple case with JSON and XML output, too.
--
-- This should be enough for those format. The only difference between JSON,
-- XML, and YAML is in the formatting, after all.
-- Check JSON format
--
-- start_matchsubs
-- m/PQO version \d+\.\d+\.\d+/
-- s/PQO version \d+\.\d+\.\d+/PQO version ##.##.##/
-- end_matchsubs
-- explain_processing_off
EXPLAIN (FORMAT JSON, COSTS OFF) SELECT * FROM generate_series(1, 10);
QUERY PLAN
[
  {
    "Plan": {
      "Node Type": "Function Scan",
      "Function Name": "generate_series",
      "Alias": "generate_series"
    },
    "Settings": {
      "Optimizer": "PQO version 3.2.0"
    }
  }
]
(1 row)
EXPLAIN (FORMAT XML, COSTS OFF) SELECT * FROM generate_series(1, 10);
QUERY PLAN
<explain xmlns="http://www.postgresql.org/2009/explain">
  <Query>
    <Plan>
      <Node-Type>Function Scan</Node-Type>
      <Function-Name>generate_series</Function-Name>
      <Alias>generate_series</Alias>
    </Plan>
    <Settings>
      <Optimizer>PQO version 3.2.0</Optimizer>
    </Settings>
  </Query>
</explain>
(1 row)
-- explain_processing_on
-- Cleanup
DROP TABLE boxes;
DROP TABLE apples;
DROP TABLE box_locations;
