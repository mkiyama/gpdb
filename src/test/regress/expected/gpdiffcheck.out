--
-- BOOLEAN
--
create table gpd1 (c1 char(1), c2 numeric, c3 numeric) distributed by (c1);
insert into gpd1 values ('a', 1, 1);
insert into gpd1 values ('a', 1, 2);
insert into gpd1 values ('b', 2, 1);
insert into gpd1 values ('b', 1, 2);
insert into gpd1 values ('c', 3, 2);
insert into gpd1 values ('c', 2, 3);
insert into gpd1 values ('d', 4, 4);
insert into gpd1 values ('d', 4, 3);
--
-- ignore
--
select c1 from gpd1;
 c1 
----
 a
 a
 c
 c
 b
 b
 d
 d
(8 rows)

--
-- order 1, 2
--
select c1, c1, c2, c3 from gpd1 order by 1,2;
 c1 | c1 | c2 | c3 
----+----+----+----
 a  | a  |  1 |  1
 a  | a  |  1 |  2
 b  | b  |  2 |  1
 b  | b  |  1 |  2
 c  | c  |  3 |  2
 c  | c  |  2 |  3
 d  | d  |  4 |  4
 d  | d  |  4 |  3
(8 rows)

--
--
select c1, c1, c2, c3 from gpd1 order by 1,2,3,4; -- order 1, 2     , 3    , 4
 c1 | c1 | c2 | c3 
----+----+----+----
 a  | a  |  1 |  1
 a  | a  |  1 |  2
 b  | b  |  1 |  2
 b  | b  |  2 |  1
 c  | c  |  2 |  3
 c  | c  |  3 |  2
 d  | d  |  4 |  3
 d  | d  |  4 |  4
(8 rows)

--
-- ignore
-- order 1, 2
--
select c1, c1, c2, c3 from gpd1 order by 1,2;
 c1 | c1 | c2 | c3 
----+----+----+----
 a  | a  |  1 |  1
 a  | a  |  1 |  2
 b  | b  |  2 |  1
 b  | b  |  1 |  2
 c  | c  |  3 |  2
 c  | c  |  2 |  3
 d  | d  |  4 |  4
 d  | d  |  4 |  3
(8 rows)

--
--  mvd 2,3->1 ; 2,3->4,5
-- order 4
--
select c1, c2, c3, c1, c1, c2 from gpd1 order by 4;
 c1 | c2 | c3 | c1 | c1 | c2 
----+----+----+----+----+----
 a  |  1 |  1 | a  | a  |  1
 a  |  1 |  2 | a  | a  |  1
 b  |  2 |  1 | b  | b  |  2
 b  |  1 |  2 | b  | b  |  1
 c  |  3 |  2 | c  | c  |  3
 c  |  2 |  3 | c  | c  |  2
 d  |  4 |  4 | d  | d  |  4
 d  |  4 |  3 | d  | d  |  4
(8 rows)

--  Brian: the contents of column 1 are not determined by any other 
--  column -- the column "specifies itself"
--
--  mvd 1->1
--
select row_number() over (), c1, c2, c3 from gpd1;
 row_number | c1 | c2 | c3 
------------+----+----+----
          1 | b  |  2 |  1
          2 | b  |  1 |  2
          3 | d  |  4 |  4
          4 | d  |  4 |  3
          5 | a  |  1 |  1
          6 | a  |  1 |  2
          7 | c  |  3 |  2
          8 | c  |  2 |  3
(8 rows)

-- Brian: 1 specifies 2
--  
--
    select -- mvd 1 -> 2
        x,
        row_number() over (partition by x) as y,
        z 
    from (values (1,'A'),(1,'B'),(2,'C'),(2,'D')) r(x,z);
 x | y | z 
---+---+---
 1 | 1 | A
 1 | 2 | B
 2 | 1 | C
 2 | 2 | D
(4 rows)

-- start_ignore
--
-- whatever is here is ignored until we reach end_ignore
--
-- end_ignore
--
-- explain testing
--
set gp_segments_for_planner=4;
set optimizer_segments=4;
set gp_cost_hashjoin_chainwalk=on;
set optimizer_nestloop_factor = 1.0;
explain analyze select a.* from gpd1 as a, gpd1 as b where b.c1 in (select max(c1) from gpd1);
                                                                     QUERY PLAN                                                                      
-----------------------------------------------------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice4; segments: 3)  (cost=1.10..3.32 rows=4 width=16) (actual time=3.283..3.293 rows=16 loops=1)
   ->  Nested Loop  (cost=1.10..3.32 rows=2 width=16) (actual time=1.277..1.436 rows=16 loops=1)
         Join Filter: (max((max(gpd1.c1)))) = b.c1
         ->  Redistribute Motion 1:3  (slice3; segments: 1)  (cost=1.10..2.23 rows=4 width=48) (actual time=1.128..1.134 rows=8 loops=1)
               Hash Key: (max((max(gpd1.c1))))
               ->  Nested Loop  (cost=1.10..2.16 rows=4 width=48) (actual time=1.002..1.116 rows=8 loops=1)
                     ->  Aggregate  (cost=1.10..1.11 rows=1 width=32) (actual time=0.857..0.857 rows=1 loops=1)
                           ->  Gather Motion 3:1  (slice1; segments: 3)  (cost=1.02..1.08 rows=1 width=32) (actual time=0.020..0.810 rows=3 loops=1)
                                 ->  Aggregate  (cost=1.02..1.03 rows=1 width=32) (actual time=0.069..0.070 rows=1 loops=1)
                                       ->  Seq Scan on gpd1  (cost=0.00..1.01 rows=1 width=2) (actual time=0.030..0.037 rows=4 loops=1)
                     ->  Materialize  (cost=0.00..1.05 rows=1 width=16) (actual time=0.143..0.168 rows=8 loops=1)
                           ->  Gather Motion 3:1  (slice2; segments: 3)  (cost=0.00..1.03 rows=1 width=16) (actual time=0.009..0.024 rows=8 loops=1)
                                 ->  Seq Scan on gpd1 a  (cost=0.00..1.01 rows=1 width=16) (actual time=0.049..0.054 rows=4 loops=1)
         ->  Materialize  (cost=0.00..1.03 rows=1 width=2) (actual time=0.016..0.019 rows=4 loops=8)
               ->  Seq Scan on gpd1 b  (cost=0.00..1.01 rows=1 width=2) (actual time=0.021..0.029 rows=4 loops=1)
   (slice0)    Executor memory: 514K bytes.
   (slice1)    Executor memory: 175K bytes avg x 3 workers, 175K bytes max (seg0).
   (slice2)    Executor memory: 149K bytes avg x 3 workers, 149K bytes max (seg0).
   (slice3)    Executor memory: 235K bytes (seg1).
   (slice4)    Executor memory: 175K bytes avg x 3 workers, 215K bytes max (seg2).
 Memory used:  128000kB
 Optimizer: legacy query optimizer
 Total runtime: 61.826 ms
(23 rows)

explain select a.* from gpd1 as a, gpd1 as b where b.c1 in (select max(c1) from gpd1);
                                                QUERY PLAN                                                 
-----------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice4; segments: 3)  (cost=1.10..3.32 rows=4 width=16)
   ->  Nested Loop  (cost=1.10..3.32 rows=2 width=16)
         Join Filter: (max((max(gpd1.c1)))) = b.c1
         ->  Redistribute Motion 1:3  (slice3; segments: 1)  (cost=1.10..2.23 rows=4 width=48)
               Hash Key: (max((max(gpd1.c1))))
               ->  Nested Loop  (cost=1.10..2.16 rows=4 width=48)
                     ->  Aggregate  (cost=1.10..1.11 rows=1 width=32)
                           ->  Gather Motion 3:1  (slice1; segments: 3)  (cost=1.02..1.08 rows=1 width=32)
                                 ->  Aggregate  (cost=1.02..1.03 rows=1 width=32)
                                       ->  Seq Scan on gpd1  (cost=0.00..1.01 rows=1 width=2)
                     ->  Materialize  (cost=0.00..1.05 rows=1 width=16)
                           ->  Gather Motion 3:1  (slice2; segments: 3)  (cost=0.00..1.03 rows=1 width=16)
                                 ->  Seq Scan on gpd1 a  (cost=0.00..1.01 rows=1 width=16)
         ->  Materialize  (cost=0.00..1.03 rows=1 width=2)
               ->  Seq Scan on gpd1 b  (cost=0.00..1.01 rows=1 width=2)
 Optimizer: legacy query optimizer
(16 rows)

select a.* from gpd1 as a, gpd1 as b where b.c1 in (select max(c1) from gpd1);
 c1 | c2 | c3 
----+----+----
 b  |  2 |  1
 b  |  1 |  2
 d  |  4 |  4
 d  |  4 |  3
 b  |  2 |  1
 b  |  1 |  2
 d  |  4 |  4
 d  |  4 |  3
 a  |  1 |  1
 a  |  1 |  2
 c  |  3 |  2
 c  |  2 |  3
 a  |  1 |  1
 a  |  1 |  2
 c  |  3 |  2
 c  |  2 |  3
(16 rows)

set gp_segments_for_planner=40;
set optimizer_segments=40;
set optimizer_nestloop_factor = 1.0;
explain select a.* from gpd1 as a, gpd1 as b where b.c1 in (select max(c1) from gpd1);
                                                QUERY PLAN                                                 
-----------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice4; segments: 3)  (cost=1.46..3.68 rows=4 width=16)
   ->  Nested Loop  (cost=1.46..3.68 rows=2 width=16)
         Join Filter: (max((max(gpd1.c1)))) = b.c1
         ->  Redistribute Motion 1:3  (slice3; segments: 1)  (cost=1.46..2.59 rows=4 width=48)
               Hash Key: (max((max(gpd1.c1))))
               ->  Nested Loop  (cost=1.46..2.52 rows=4 width=48)
                     ->  Aggregate  (cost=1.46..1.47 rows=1 width=32)
                           ->  Gather Motion 3:1  (slice1; segments: 3)  (cost=1.02..1.44 rows=1 width=32)
                                 ->  Aggregate  (cost=1.02..1.03 rows=1 width=32)
                                       ->  Seq Scan on gpd1  (cost=0.00..1.01 rows=1 width=2)
                     ->  Materialize  (cost=0.00..1.05 rows=1 width=16)
                           ->  Gather Motion 3:1  (slice2; segments: 3)  (cost=0.00..1.03 rows=1 width=16)
                                 ->  Seq Scan on gpd1 a  (cost=0.00..1.01 rows=1 width=16)
         ->  Materialize  (cost=0.00..1.03 rows=1 width=2)
               ->  Seq Scan on gpd1 b  (cost=0.00..1.01 rows=1 width=2)
 Optimizer: legacy query optimizer
(16 rows)

select a.* from gpd1 as a, gpd1 as b where b.c1 in (select max(c1) from gpd1);
 c1 | c2 | c3 
----+----+----
 a  |  1 |  1
 a  |  1 |  2
 c  |  3 |  2
 c  |  2 |  3
 a  |  1 |  1
 a  |  1 |  2
 c  |  3 |  2
 c  |  2 |  3
 b  |  2 |  1
 b  |  1 |  2
 d  |  4 |  4
 d  |  4 |  3
 b  |  2 |  1
 b  |  1 |  2
 d  |  4 |  4
 d  |  4 |  3
(16 rows)

explain analyze select a.* from gpd1 as a, gpd1 as b where b.c1 in (select max(c1) from gpd1);
                                                                     QUERY PLAN                                                                      
-----------------------------------------------------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice4; segments: 3)  (cost=1.46..3.68 rows=4 width=16) (actual time=2.368..2.372 rows=16 loops=1)
   ->  Nested Loop  (cost=1.46..3.68 rows=2 width=16) (actual time=1.923..2.016 rows=16 loops=1)
         Join Filter: (max((max(gpd1.c1)))) = b.c1
         ->  Redistribute Motion 1:3  (slice3; segments: 1)  (cost=1.46..2.59 rows=4 width=48) (actual time=1.849..1.852 rows=8 loops=1)
               Hash Key: (max((max(gpd1.c1))))
               ->  Nested Loop  (cost=1.46..2.52 rows=4 width=48) (actual time=0.412..0.467 rows=8 loops=1)
                     ->  Aggregate  (cost=1.46..1.47 rows=1 width=32) (actual time=0.348..0.348 rows=1 loops=1)
                           ->  Gather Motion 3:1  (slice1; segments: 3)  (cost=1.02..1.44 rows=1 width=32) (actual time=0.008..0.336 rows=3 loops=1)
                                 ->  Aggregate  (cost=1.02..1.03 rows=1 width=32) (actual time=0.024..0.025 rows=1 loops=1)
                                       ->  Seq Scan on gpd1  (cost=0.00..1.01 rows=1 width=2) (actual time=0.014..0.018 rows=4 loops=1)
                     ->  Materialize  (cost=0.00..1.05 rows=1 width=16) (actual time=0.062..0.075 rows=8 loops=1)
                           ->  Gather Motion 3:1  (slice2; segments: 3)  (cost=0.00..1.03 rows=1 width=16) (actual time=0.005..0.012 rows=8 loops=1)
                                 ->  Seq Scan on gpd1 a  (cost=0.00..1.01 rows=1 width=16) (actual time=0.010..0.012 rows=4 loops=1)
         ->  Materialize  (cost=0.00..1.03 rows=1 width=2) (actual time=0.008..0.009 rows=4 loops=8)
               ->  Seq Scan on gpd1 b  (cost=0.00..1.01 rows=1 width=2) (actual time=0.012..0.018 rows=4 loops=1)
   (slice0)    Executor memory: 514K bytes.
   (slice1)    Executor memory: 175K bytes avg x 3 workers, 175K bytes max (seg0).
   (slice2)    Executor memory: 149K bytes avg x 3 workers, 149K bytes max (seg0).
   (slice3)    Executor memory: 235K bytes (seg1).
   (slice4)    Executor memory: 175K bytes avg x 3 workers, 215K bytes max (seg2).
 Memory used:  128000kB
 Optimizer: legacy query optimizer
 Total runtime: 3.412 ms
(23 rows)

-- start_equiv
--
-- order 1
select c1 from gpd1 order by 1;
 c1 
----
 a
 a
 b
 b
 c
 c
 d
 d
(8 rows)

--
--
select c1 from gpd1 ;
 c1 
----
 a
 a
 c
 c
 b
 b
 d
 d
(8 rows)

--
--end_equiv
--
--
--
-- Clean up
--
DROP TABLE  gpd1;
-- start_matchsubs
--
-- # create a match/subs expression to handle a value which always changes
--
-- # use zero-width negative look-behind assertion to match "gpmatchsubs1"
-- # that does not follow substring
--
-- m/(?<!substring..)gpmatchsubs1/
-- s/gpmatchsubs1.*/happy sub1/
--
-- m/(?<!substring..)gpmatchsubs2/
-- s/gpmatchsubs2.*/happy sub2/
--
-- end_matchsubs
-- substitute constant values for results
-- use substring because length of time string varies which changes output
select substring('gpmatchsubs1' || now(), 1,  25);
         substring         
---------------------------
 gpmatchsubs1Mon Jul 21 14
(1 row)

select substring('gpmatchsubs2' || now(), 1,  25);
         substring         
---------------------------
 gpmatchsubs2Mon Jul 21 14
(1 row)

-- start_matchignore
--
-- # create a match expression to handle a value which always changes
--
-- m/(?<!substring..)gpmatchignore1/
-- m/(?<!substring..)gpmatchignore2/
--
-- end_matchignore
-- just ignore the results
select substring('gpmatchignore1' || now(), 1,  25);
         substring         
---------------------------
 gpmatchignore1Mon Jul 21 
(1 row)

select substring('gpmatchignore2' || now(), 1,  25);
         substring         
---------------------------
 gpmatchignore2Mon Jul 21 
(1 row)

reset optimizer_nestloop_factor;
-- 
