--
-- BOOLEAN
--
create table gpd1 (c1 char(1), c2 numeric, c3 numeric) distributed by (c1);
insert into gpd1 values ('a', 1, 1);
insert into gpd1 values ('a', 1, 2);
insert into gpd1 values ('b', 2, 1);
insert into gpd1 values ('b', 1, 2);
insert into gpd1 values ('c', 3, 2);
insert into gpd1 values ('c', 2, 3);
insert into gpd1 values ('d', 4, 4);
insert into gpd1 values ('d', 4, 3);
--
-- ignore
--
select c1 from gpd1;
 c1 
----
 a
 a
 c
 c
 b
 b
 d
 d
(8 rows)

--
-- order 1, 2
--
select c1, c1, c2, c3 from gpd1 order by 1,2;
 c1 | c1 | c2 | c3 
----+----+----+----
 a  | a  |  1 |  1
 a  | a  |  1 |  2
 b  | b  |  2 |  1
 b  | b  |  1 |  2
 c  | c  |  3 |  2
 c  | c  |  2 |  3
 d  | d  |  4 |  4
 d  | d  |  4 |  3
(8 rows)

--
--
select c1, c1, c2, c3 from gpd1 order by 1,2,3,4; -- order 1, 2     , 3    , 4
 c1 | c1 | c2 | c3 
----+----+----+----
 a  | a  |  1 |  1
 a  | a  |  1 |  2
 b  | b  |  1 |  2
 b  | b  |  2 |  1
 c  | c  |  2 |  3
 c  | c  |  3 |  2
 d  | d  |  4 |  3
 d  | d  |  4 |  4
(8 rows)

--
-- ignore
-- order 1, 2
--
select c1, c1, c2, c3 from gpd1 order by 1,2;
 c1 | c1 | c2 | c3 
----+----+----+----
 a  | a  |  1 |  1
 a  | a  |  1 |  2
 b  | b  |  2 |  1
 b  | b  |  1 |  2
 c  | c  |  3 |  2
 c  | c  |  2 |  3
 d  | d  |  4 |  4
 d  | d  |  4 |  3
(8 rows)

--
--  mvd 2,3->1 ; 2,3->4,5
-- order 4
--
select c1, c2, c3, c1, c1, c2 from gpd1 order by 4;
 c1 | c2 | c3 | c1 | c1 | c2 
----+----+----+----+----+----
 a  |  1 |  1 | a  | a  |  1
 a  |  1 |  2 | a  | a  |  1
 b  |  2 |  1 | b  | b  |  2
 b  |  1 |  2 | b  | b  |  1
 c  |  3 |  2 | c  | c  |  3
 c  |  2 |  3 | c  | c  |  2
 d  |  4 |  4 | d  | d  |  4
 d  |  4 |  3 | d  | d  |  4
(8 rows)

--  Brian: the contents of column 1 are not determined by any other 
--  column -- the column "specifies itself"
--
--  mvd 1->1
--
select row_number() over (), c1, c2, c3 from gpd1;
 row_number | c1 | c2 | c3 
------------+----+----+----
          1 | b  |  2 |  1
          2 | b  |  1 |  2
          3 | d  |  4 |  4
          4 | d  |  4 |  3
          5 | a  |  1 |  1
          6 | a  |  1 |  2
          7 | c  |  3 |  2
          8 | c  |  2 |  3
(8 rows)

-- Brian: 1 specifies 2
--  
--
    select -- mvd 1 -> 2
        x,
        row_number() over (partition by x) as y,
        z 
    from (values (1,'A'),(1,'B'),(2,'C'),(2,'D')) r(x,z);
 x | y | z 
---+---+---
 1 | 1 | A
 1 | 2 | B
 2 | 1 | C
 2 | 2 | D
(4 rows)

-- start_ignore
--
-- whatever is here is ignored until we reach end_ignore
--
-- end_ignore
--
-- explain testing
--
set gp_segments_for_planner=4;
set optimizer_segments=4;
set gp_cost_hashjoin_chainwalk=on;
set optimizer_nestloop_factor = 1.0;
explain analyze select a.* from gpd1 as a, gpd1 as b where b.c1 in (select max(c1) from gpd1);
                                                                    QUERY PLAN                                                                    
--------------------------------------------------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice4; segments: 3)  (cost=10000000002.12..10000000003.29 rows=4 width=16)
   Rows out:  16 rows at destination with 8.479 ms to first row, 8.482 ms to end.
   ->  Hash Join  (cost=10000000002.12..10000000003.29 rows=2 width=16)
         Hash Cond: (max((max(gpd1.c1)))) = b.c1
         Rows out:  16 rows (seg2) with 5.606 ms to first row, 7.187 ms to end.
         Executor memory:  1K bytes avg, 1K bytes max (seg2).
         Work_mem used:  1K bytes avg, 1K bytes max (seg2). Workfile: (0 spilling)
         (seg2)   Hash chain length 2.0 avg, 2 max, using 2 of 262144 buckets.
         ->  Redistribute Motion 1:3  (slice3; segments: 1)  (cost=10000000001.10..10000000002.23 rows=4 width=48)
               Hash Key: (max((max(gpd1.c1))))
               Rows out:  8 rows at destination (seg2) with 4.272 ms to first row, 4.277 ms to end.
               ->  Nested Loop  (cost=10000000001.10..10000000002.16 rows=4 width=48)
                     Rows out:  8 rows with 3.324 ms to first row, 3.392 ms to end.
                     ->  Aggregate  (cost=1.10..1.11 rows=1 width=32)
                           Rows out:  1 rows with 3.217 ms to end.
                           Executor memory:  8K bytes.
                           ->  Gather Motion 3:1  (slice1; segments: 3)  (cost=1.02..1.08 rows=1 width=32)
                                 Rows out:  3 rows at destination with 0.012 ms to first row, 3.166 ms to end.
                                 ->  Aggregate  (cost=1.02..1.03 rows=1 width=32)
                                       Rows out:  Avg 1.0 rows x 3 workers.  Max 1 rows (seg0) with 0.093 ms to end.
                                       Executor memory:  8K bytes avg, 8K bytes max (seg0).
                                       ->  Seq Scan on gpd1  (cost=0.00..1.01 rows=1 width=2)
                                             Rows out:  Avg 2.7 rows x 3 workers.  Max 4 rows (seg2) with 0.066 ms to first row, 0.070 ms to end.
                     ->  Materialize  (cost=1.03..1.04 rows=1 width=16)
                           Rows out:  8 rows with 0.104 ms to first row, 0.119 ms to end.
                           ->  Gather Motion 3:1  (slice2; segments: 3)  (cost=0.00..1.03 rows=1 width=16)
                                 Rows out:  8 rows at destination with 0.007 ms to first row, 0.019 ms to end.
                                 ->  Seq Scan on gpd1 a  (cost=0.00..1.01 rows=1 width=16)
                                       Rows out:  Avg 2.7 rows x 3 workers.  Max 4 rows (seg2) with 0.040 ms to first row, 0.043 ms to end.
         ->  Hash  (cost=1.01..1.01 rows=1 width=2)
               Rows in:  Avg 2.7 rows x 3 workers.  Max 4 rows (seg2) with 0.029 ms to end, start offset by 24 ms.
               ->  Seq Scan on gpd1 b  (cost=0.00..1.01 rows=1 width=2)
                     Rows out:  Avg 2.7 rows x 3 workers.  Max 4 rows (seg2) with 0.018 ms to first row, 0.021 ms to end.
 Slice statistics:
   (slice0)    Executor memory: 514K bytes.
   (slice1)    Executor memory: 175K bytes avg x 3 workers, 175K bytes max (seg0).
   (slice2)    Executor memory: 149K bytes avg x 3 workers, 149K bytes max (seg0).
   (slice3)    Executor memory: 235K bytes (seg1).
   (slice4)    Executor memory: 2224K bytes avg x 3 workers, 2227K bytes max (seg2).  Work_mem: 1K bytes max.
 Statement statistics:
   Memory used: 128000K bytes
 Settings:  gp_cost_hashjoin_chainwalk=on; gp_segments_for_planner=4; optimizer=off; optimizer_nestloop_factor=1; optimizer_segments=4
 Optimizer status: legacy query optimizer
 Total runtime: 31.464 ms
(44 rows)

explain select a.* from gpd1 as a, gpd1 as b where b.c1 in (select max(c1) from gpd1);
                                                              QUERY PLAN                                                               
---------------------------------------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice4; segments: 3)  (cost=10000000002.12..10000000003.29 rows=4 width=16)
   ->  Hash Join  (cost=10000000002.12..10000000003.29 rows=2 width=16)
         Hash Cond: (max((max(gpd1.c1)))) = b.c1
         ->  Redistribute Motion 1:3  (slice3; segments: 1)  (cost=10000000001.10..10000000002.23 rows=4 width=48)
               Hash Key: (max((max(gpd1.c1))))
               ->  Nested Loop  (cost=10000000001.10..10000000002.16 rows=4 width=48)
                     ->  Aggregate  (cost=1.10..1.11 rows=1 width=32)
                           ->  Gather Motion 3:1  (slice1; segments: 3)  (cost=1.02..1.08 rows=1 width=32)
                                 ->  Aggregate  (cost=1.02..1.03 rows=1 width=32)
                                       ->  Seq Scan on gpd1  (cost=0.00..1.01 rows=1 width=2)
                     ->  Materialize  (cost=1.03..1.04 rows=1 width=16)
                           ->  Gather Motion 3:1  (slice2; segments: 3)  (cost=0.00..1.03 rows=1 width=16)
                                 ->  Seq Scan on gpd1 a  (cost=0.00..1.01 rows=1 width=16)
         ->  Hash  (cost=1.01..1.01 rows=1 width=2)
               ->  Seq Scan on gpd1 b  (cost=0.00..1.01 rows=1 width=2)
 Settings:  gp_cost_hashjoin_chainwalk=on; gp_segments_for_planner=4; optimizer=off; optimizer_nestloop_factor=1; optimizer_segments=4
 Optimizer status: legacy query optimizer
(17 rows)

select a.* from gpd1 as a, gpd1 as b where b.c1 in (select max(c1) from gpd1);
 c1 | c2 | c3 
----+----+----
 b  |  2 |  1
 b  |  1 |  2
 d  |  4 |  4
 d  |  4 |  3
 b  |  2 |  1
 b  |  1 |  2
 d  |  4 |  4
 d  |  4 |  3
 a  |  1 |  1
 a  |  1 |  2
 c  |  3 |  2
 c  |  2 |  3
 a  |  1 |  1
 a  |  1 |  2
 c  |  3 |  2
 c  |  2 |  3
(16 rows)

set gp_segments_for_planner=40;
set optimizer_segments=40;
set optimizer_nestloop_factor = 1.0;
explain select a.* from gpd1 as a, gpd1 as b where b.c1 in (select max(c1) from gpd1);
                                                               QUERY PLAN                                                                
-----------------------------------------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice4; segments: 3)  (cost=10000000002.48..10000000003.65 rows=4 width=16)
   ->  Hash Join  (cost=10000000002.48..10000000003.65 rows=2 width=16)
         Hash Cond: (max((max(gpd1.c1)))) = b.c1
         ->  Redistribute Motion 1:3  (slice3; segments: 1)  (cost=10000000001.46..10000000002.59 rows=4 width=48)
               Hash Key: (max((max(gpd1.c1))))
               ->  Nested Loop  (cost=10000000001.46..10000000002.52 rows=4 width=48)
                     ->  Aggregate  (cost=1.46..1.47 rows=1 width=32)
                           ->  Gather Motion 3:1  (slice1; segments: 3)  (cost=1.02..1.44 rows=1 width=32)
                                 ->  Aggregate  (cost=1.02..1.03 rows=1 width=32)
                                       ->  Seq Scan on gpd1  (cost=0.00..1.01 rows=1 width=2)
                     ->  Materialize  (cost=1.03..1.04 rows=1 width=16)
                           ->  Gather Motion 3:1  (slice2; segments: 3)  (cost=0.00..1.03 rows=1 width=16)
                                 ->  Seq Scan on gpd1 a  (cost=0.00..1.01 rows=1 width=16)
         ->  Hash  (cost=1.01..1.01 rows=1 width=2)
               ->  Seq Scan on gpd1 b  (cost=0.00..1.01 rows=1 width=2)
 Settings:  gp_cost_hashjoin_chainwalk=on; gp_segments_for_planner=40; optimizer=off; optimizer_nestloop_factor=1; optimizer_segments=40
 Optimizer status: legacy query optimizer
(17 rows)

select a.* from gpd1 as a, gpd1 as b where b.c1 in (select max(c1) from gpd1);
 c1 | c2 | c3 
----+----+----
 a  |  1 |  1
 a  |  1 |  2
 c  |  3 |  2
 c  |  2 |  3
 a  |  1 |  1
 a  |  1 |  2
 c  |  3 |  2
 c  |  2 |  3
 b  |  2 |  1
 b  |  1 |  2
 d  |  4 |  4
 d  |  4 |  3
 b  |  2 |  1
 b  |  1 |  2
 d  |  4 |  4
 d  |  4 |  3
(16 rows)

explain analyze select a.* from gpd1 as a, gpd1 as b where b.c1 in (select max(c1) from gpd1);
                                                                    QUERY PLAN                                                                    
--------------------------------------------------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice4; segments: 3)  (cost=10000000002.48..10000000003.65 rows=4 width=16)
   Rows out:  16 rows at destination with 4.856 ms to first row, 5.464 ms to end.
   ->  Hash Join  (cost=10000000002.48..10000000003.65 rows=2 width=16)
         Hash Cond: (max((max(gpd1.c1)))) = b.c1
         Rows out:  16 rows (seg2) with 3.247 ms to first row, 4.504 ms to end.
         Executor memory:  1K bytes avg, 1K bytes max (seg2).
         Work_mem used:  1K bytes avg, 1K bytes max (seg2). Workfile: (0 spilling)
         (seg2)   Hash chain length 2.0 avg, 2 max, using 2 of 262144 buckets.
         ->  Redistribute Motion 1:3  (slice3; segments: 1)  (cost=10000000001.46..10000000002.59 rows=4 width=48)
               Hash Key: (max((max(gpd1.c1))))
               Rows out:  8 rows at destination (seg2) with 3.068 ms to first row, 3.071 ms to end.
               ->  Nested Loop  (cost=10000000001.46..10000000002.52 rows=4 width=48)
                     Rows out:  8 rows with 0.600 ms to first row, 0.678 ms to end.
                     ->  Aggregate  (cost=1.46..1.47 rows=1 width=32)
                           Rows out:  1 rows with 0.516 ms to end.
                           Executor memory:  8K bytes.
                           ->  Gather Motion 3:1  (slice1; segments: 3)  (cost=1.02..1.44 rows=1 width=32)
                                 Rows out:  3 rows at destination with 0.009 ms to first row, 0.500 ms to end.
                                 ->  Aggregate  (cost=1.02..1.03 rows=1 width=32)
                                       Rows out:  Avg 1.0 rows x 3 workers.  Max 1 rows (seg0) with 0.034 ms to end.
                                       Executor memory:  8K bytes avg, 8K bytes max (seg0).
                                       ->  Seq Scan on gpd1  (cost=0.00..1.01 rows=1 width=2)
                                             Rows out:  Avg 2.7 rows x 3 workers.  Max 4 rows (seg2) with 0.021 ms to first row, 0.025 ms to end.
                     ->  Materialize  (cost=1.03..1.04 rows=1 width=16)
                           Rows out:  8 rows with 0.082 ms to first row, 0.096 ms to end.
                           ->  Gather Motion 3:1  (slice2; segments: 3)  (cost=0.00..1.03 rows=1 width=16)
                                 Rows out:  8 rows at destination with 0.005 ms to first row, 0.013 ms to end.
                                 ->  Seq Scan on gpd1 a  (cost=0.00..1.01 rows=1 width=16)
                                       Rows out:  Avg 2.7 rows x 3 workers.  Max 4 rows (seg2) with 0.014 ms to first row, 0.018 ms to end.
         ->  Hash  (cost=1.01..1.01 rows=1 width=2)
               Rows in:  Avg 2.7 rows x 3 workers.  Max 4 rows (seg2) with 0.044 ms to end, start offset by 0.933 ms.
               ->  Seq Scan on gpd1 b  (cost=0.00..1.01 rows=1 width=2)
                     Rows out:  Avg 2.7 rows x 3 workers.  Max 4 rows (seg2) with 0.024 ms to first row, 0.030 ms to end.
 Slice statistics:
   (slice0)    Executor memory: 514K bytes.
   (slice1)    Executor memory: 175K bytes avg x 3 workers, 175K bytes max (seg0).
   (slice2)    Executor memory: 149K bytes avg x 3 workers, 149K bytes max (seg0).
   (slice3)    Executor memory: 235K bytes (seg1).
   (slice4)    Executor memory: 2224K bytes avg x 3 workers, 2227K bytes max (seg2).  Work_mem: 1K bytes max.
 Statement statistics:
   Memory used: 128000K bytes
 Settings:  gp_cost_hashjoin_chainwalk=on; gp_segments_for_planner=40; optimizer=off; optimizer_nestloop_factor=1; optimizer_segments=40
 Optimizer status: legacy query optimizer
 Total runtime: 6.489 ms
(44 rows)

-- start_equiv
--
-- order 1
select c1 from gpd1 order by 1;
 c1 
----
 a
 a
 b
 b
 c
 c
 d
 d
(8 rows)

--
--
select c1 from gpd1 ;
 c1 
----
 a
 a
 c
 c
 b
 b
 d
 d
(8 rows)

--
--end_equiv
--
--
--
-- Clean up
--
DROP TABLE  gpd1;
-- start_matchsubs
--
-- # create a match/subs expression to handle a value which always changes
--
-- # use zero-width negative look-behind assertion to match "gpmatchsubs1"
-- # that does not follow substring
--
-- m/(?<!substring..)gpmatchsubs1/
-- s/gpmatchsubs1.*/happy sub1/
--
-- m/(?<!substring..)gpmatchsubs2/
-- s/gpmatchsubs2.*/happy sub2/
--
-- end_matchsubs
-- substitute constant values for results
-- use substring because length of time string varies which changes output
select substring('gpmatchsubs1' || now(), 1,  25);
         substring         
---------------------------
 gpmatchsubs1Mon Jul 21 14
(1 row)

select substring('gpmatchsubs2' || now(), 1,  25);
         substring         
---------------------------
 gpmatchsubs2Mon Jul 21 14
(1 row)

-- start_matchignore
--
-- # create a match expression to handle a value which always changes
--
-- m/(?<!substring..)gpmatchignore1/
-- m/(?<!substring..)gpmatchignore2/
--
-- end_matchignore
-- just ignore the results
select substring('gpmatchignore1' || now(), 1,  25);
         substring         
---------------------------
 gpmatchignore1Mon Jul 21 
(1 row)

select substring('gpmatchignore2' || now(), 1,  25);
         substring         
---------------------------
 gpmatchignore2Mon Jul 21 
(1 row)

reset optimizer_nestloop_factor;
-- 
