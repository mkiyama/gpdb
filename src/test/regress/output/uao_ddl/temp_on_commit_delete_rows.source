create schema temp_on_commit_delete_rows_@orientation@;
set search_path="$user",temp_on_commit_delete_rows_@orientation@,public;
SET gp_default_storage_options='orientation=@orientation@';
--
-- Test ON COMMIT DELETE ROWS action against AO/AOCS tables.
--
create function nonempty_segno(oid) returns setof int as 
$$
-- Input to this function must be oid and not table name.  A distinct
-- query fails to find the temp table in the right namespace
-- otherwise.
select segno from gp_toolkit.__gp_@aoseg@_name($1::regclass::text)
 where tupcount > 0;
$$ language sql;
begin;
create temp table temp_delrows(a int, b int)
 with (appendonly=true) on commit delete rows distributed by(a);
insert into temp_delrows select i, i from generate_series(1,20)i;
create index idelrows on temp_delrows using bitmap(a);
update temp_delrows set b = -a;
-- Aoseg table should report at least one non-empty segfile.
select distinct nonempty_segno('temp_delrows'::regclass);
 nonempty_segno 
----------------
              1
(1 row)

select distinct nonempty_segno('temp_delrows'::regclass)
 from gp_dist_random('gp_id');
 nonempty_segno 
----------------
              1
(1 row)

commit;
select count(*) = 0 as passed from temp_delrows;
 passed 
--------
 t
(1 row)

-- All segfiles must be empty after commit.
select nonempty_segno('temp_delrows'::regclass);
 nonempty_segno 
----------------
(0 rows)

select nonempty_segno('temp_delrows'::regclass)
 from gp_dist_random('gp_id');
 nonempty_segno 
----------------
(0 rows)

-- PT should contain entry for segno = 0 only, segno = 1 files
-- have been deleted by "ON COMMIT DELETE ROWS" action.
select pt.segment_file_num from gp_relation_node pt inner join pg_class c
 on c.relfilenode = pt.relfilenode_oid where c.relname = 'temp_delrows'
 and c.relnamespace = pg_my_temp_schema();
 segment_file_num 
------------------
                0
(1 row)

select distinct pt.segment_file_num from
 gp_dist_random('gp_relation_node') pt inner join
 gp_dist_random('pg_class') c on c.gp_segment_id = pt.gp_segment_id and
 c.relfilenode = pt.relfilenode_oid where c.relname = 'temp_delrows' and
 c.relnamespace = pg_my_temp_schema();
 segment_file_num 
------------------
                0
(1 row)

-- DML after delete rows action.
begin;
insert into temp_delrows select i, i from generate_series(1,50)i;
delete from temp_delrows where a > 25;
select count(*) = 25 as passed from temp_delrows;
 passed 
--------
 t
(1 row)

-- Abort should leave no tuples in the table.
abort;
select count(*) = 0 as passed from temp_delrows;
 passed 
--------
 t
(1 row)

-- No begin/end block, each insert is a separate transaction
insert into temp_delrows values (1,1), (2,2), (3,3);
select count(*) = 0 as passed from temp_delrows;
 passed 
--------
 t
(1 row)

insert into temp_delrows select i,i from generate_series(1,10)i;
select count(*) = 0 as passed from temp_delrows;
 passed 
--------
 t
(1 row)

-- All segfiles must be empty after commit.
select nonempty_segno('temp_delrows'::regclass);
 nonempty_segno 
----------------
(0 rows)

select nonempty_segno('temp_delrows'::regclass)
 from gp_dist_random('gp_id');
 nonempty_segno 
----------------
(0 rows)

