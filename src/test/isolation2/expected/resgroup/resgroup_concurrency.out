-- test1: test gp_toolkit.gp_resgroup_status and pg_stat_activity
-- create a resource group when gp_resource_manager is queue
DROP ROLE IF EXISTS role_concurrency_test;
DROP
-- start_ignore
DROP RESOURCE GROUP rg_concurrency_test;
DROP
-- end_ignore
CREATE RESOURCE GROUP rg_concurrency_test WITH (concurrency=2, cpu_rate_limit=20, memory_limit=20);
CREATE
CREATE ROLE role_concurrency_test RESOURCE GROUP rg_concurrency_test;
CREATE

-- no query has been assigned to the this group

SELECT r.rsgname, num_running, num_queueing, num_queued, num_executed FROM gp_toolkit.gp_resgroup_status s, pg_resgroup r WHERE s.groupid=r.oid AND r.rsgname='rg_concurrency_test';
rsgname            |num_running|num_queueing|num_queued|num_executed
-------------------+-----------+------------+----------+------------
rg_concurrency_test|0          |0           |0         |0           
(1 row)
2:SET ROLE role_concurrency_test;
SET
2:BEGIN;
BEGIN
3:SET ROLE role_concurrency_test;
SET
3:BEGIN;
BEGIN
4:SET ROLE role_concurrency_test;
SET
4&:BEGIN;  <waiting ...>

-- new transaction will be blocked when the concurrency limit of the resource group is reached.
SELECT r.rsgname, num_running, num_queueing, num_queued, num_executed FROM gp_toolkit.gp_resgroup_status s, pg_resgroup r WHERE s.groupid=r.oid AND r.rsgname='rg_concurrency_test';
rsgname            |num_running|num_queueing|num_queued|num_executed
-------------------+-----------+------------+----------+------------
rg_concurrency_test|2          |1           |1         |2           
(1 row)
SELECT waiting_reason, rsgqueueduration > '0'::interval as time from pg_stat_activity where current_query = 'BEGIN;' and rsgname = 'rg_concurrency_test';
waiting_reason|time
--------------+----
resgroup      |t   
(1 row)
2:END;
END
3:END;
END
4<:  <... completed>
BEGIN
4:END;
END
2q: ... <quitting>
3q: ... <quitting>
4q: ... <quitting>
SELECT r.rsgname, num_running, num_queueing, num_queued, num_executed FROM gp_toolkit.gp_resgroup_status s, pg_resgroup r WHERE s.groupid=r.oid AND r.rsgname='rg_concurrency_test';
rsgname            |num_running|num_queueing|num_queued|num_executed
-------------------+-----------+------------+----------+------------
rg_concurrency_test|0          |0           |1         |3           
(1 row)
DROP ROLE role_concurrency_test;
DROP
DROP RESOURCE GROUP rg_concurrency_test;
DROP

-- test2: test alter concurrency
-- Create a resource group with concurrency=2. Prepare 2 running transactions and 1 queueing transactions.
-- Alter concurrency 2->3, the queueing transaction will be woken up, the 'value' and 'proposed' of pg_resgroupcapability will be set to 3.
DROP ROLE IF EXISTS role_concurrency_test;
DROP
-- start_ignore
DROP RESOURCE GROUP rg_concurrency_test;
ERROR:  resource group "rg_concurrency_test" does not exist
-- end_ignore
CREATE RESOURCE GROUP rg_concurrency_test WITH (concurrency=2, cpu_rate_limit=20, memory_limit=20);
CREATE
CREATE ROLE role_concurrency_test RESOURCE GROUP rg_concurrency_test;
CREATE
12:SET ROLE role_concurrency_test;
SET
12:BEGIN;
BEGIN
13:SET ROLE role_concurrency_test;
SET
13:BEGIN;
BEGIN
14:SET ROLE role_concurrency_test;
SET
14&:BEGIN;  <waiting ...>
SELECT r.rsgname, num_running, num_queueing, num_queued, num_executed FROM gp_toolkit.gp_resgroup_status s, pg_resgroup r WHERE s.groupid=r.oid AND r.rsgname='rg_concurrency_test';
rsgname            |num_running|num_queueing|num_queued|num_executed
-------------------+-----------+------------+----------+------------
rg_concurrency_test|2          |1           |1         |2           
(1 row)
SELECT concurrency,proposed_concurrency FROM gp_toolkit.gp_resgroup_config WHERE groupname='rg_concurrency_test';
concurrency|proposed_concurrency
-----------+--------------------
2          |2                   
(1 row)
ALTER RESOURCE GROUP rg_concurrency_test SET CONCURRENCY 3;
ALTER
SELECT r.rsgname, num_running, num_queueing, num_queued, num_executed FROM gp_toolkit.gp_resgroup_status s, pg_resgroup r WHERE s.groupid=r.oid AND r.rsgname='rg_concurrency_test';
rsgname            |num_running|num_queueing|num_queued|num_executed
-------------------+-----------+------------+----------+------------
rg_concurrency_test|2          |1           |1         |2           
(1 row)
SELECT concurrency,proposed_concurrency FROM gp_toolkit.gp_resgroup_config WHERE groupname='rg_concurrency_test';
concurrency|proposed_concurrency
-----------+--------------------
3          |3                   
(1 row)
12:END;
END
13:END;
END
14<:  <... completed>
BEGIN
14:END;
END
12q: ... <quitting>
13q: ... <quitting>
14q: ... <quitting>
DROP ROLE role_concurrency_test;
DROP
DROP RESOURCE GROUP rg_concurrency_test;
DROP

-- test3: test alter concurrency
-- Create a resource group with concurrency=3. Prepare 3 running transactions, and 1 queueing transaction.
DROP ROLE IF EXISTS role_concurrency_test;
DROP
-- start_ignore
DROP RESOURCE GROUP rg_concurrency_test;
ERROR:  resource group "rg_concurrency_test" does not exist
-- end_ignore
CREATE RESOURCE GROUP rg_concurrency_test WITH (concurrency=3, cpu_rate_limit=20, memory_limit=20);
CREATE
CREATE ROLE role_concurrency_test RESOURCE GROUP rg_concurrency_test;
CREATE
22:SET ROLE role_concurrency_test;
SET
22:BEGIN;
BEGIN
23:SET ROLE role_concurrency_test;
SET
23:BEGIN;
BEGIN
24:SET ROLE role_concurrency_test;
SET
24:BEGIN;
BEGIN
25:SET ROLE role_concurrency_test;
SET
25&:BEGIN;  <waiting ...>
SELECT r.rsgname, num_running, num_queueing, num_queued, num_executed FROM gp_toolkit.gp_resgroup_status s, pg_resgroup r WHERE s.groupid=r.oid AND r.rsgname='rg_concurrency_test';
rsgname            |num_running|num_queueing|num_queued|num_executed
-------------------+-----------+------------+----------+------------
rg_concurrency_test|3          |1           |1         |3           
(1 row)
SELECT concurrency,proposed_concurrency FROM gp_toolkit.gp_resgroup_config WHERE groupname='rg_concurrency_test';
concurrency|proposed_concurrency
-----------+--------------------
3          |3                   
(1 row)
-- Alter concurrency 3->2, the 'proposed' of pg_resgroupcapability will be set to 2.
ALTER RESOURCE GROUP rg_concurrency_test SET CONCURRENCY 2;
ALTER
SELECT concurrency,proposed_concurrency FROM gp_toolkit.gp_resgroup_config WHERE groupname='rg_concurrency_test';
concurrency|proposed_concurrency
-----------+--------------------
3          |2                   
(1 row)
-- When one transaction is finished, queueing transaction won't be woken up. There're 2 running transactions and 1 queueing transaction.
24:END;
END
SELECT r.rsgname, num_running, num_queueing, num_queued, num_executed FROM gp_toolkit.gp_resgroup_status s, pg_resgroup r WHERE s.groupid=r.oid AND r.rsgname='rg_concurrency_test';
rsgname            |num_running|num_queueing|num_queued|num_executed
-------------------+-----------+------------+----------+------------
rg_concurrency_test|2          |1           |1         |3           
(1 row)
-- New transaction will be queued, there're 2 running and 2 queueing transactions.
24&:BEGIN;  <waiting ...>
SELECT r.rsgname, num_running, num_queueing, num_queued, num_executed FROM gp_toolkit.gp_resgroup_status s, pg_resgroup r WHERE s.groupid=r.oid AND r.rsgname='rg_concurrency_test';
rsgname            |num_running|num_queueing|num_queued|num_executed
-------------------+-----------+------------+----------+------------
rg_concurrency_test|2          |2           |2         |3           
(1 row)
-- Finish another transaction, one queueing transaction will be woken up, there're 2 running transactions and 1 queueing transaction.
22:END;
END
SELECT r.rsgname, num_running, num_queueing, num_queued, num_executed FROM gp_toolkit.gp_resgroup_status s, pg_resgroup r WHERE s.groupid=r.oid AND r.rsgname='rg_concurrency_test';
rsgname            |num_running|num_queueing|num_queued|num_executed
-------------------+-----------+------------+----------+------------
rg_concurrency_test|2          |1           |2         |4           
(1 row)
-- Alter concurrency 2->2, the 'value' and 'proposed' of pg_resgroupcapability will be set to 2.
ALTER RESOURCE GROUP rg_concurrency_test SET CONCURRENCY 2;
ALTER
SELECT concurrency,proposed_concurrency FROM gp_toolkit.gp_resgroup_config WHERE groupname='rg_concurrency_test';
concurrency|proposed_concurrency
-----------+--------------------
2          |2                   
(1 row)
-- Finish another transaction, one queueing transaction will be woken up, there're 2 running transactions and 0 queueing transaction.
23:END;
END
SELECT r.rsgname, num_running, num_queueing, num_queued, num_executed FROM gp_toolkit.gp_resgroup_status s, pg_resgroup r WHERE s.groupid=r.oid AND r.rsgname='rg_concurrency_test';
rsgname            |num_running|num_queueing|num_queued|num_executed
-------------------+-----------+------------+----------+------------
rg_concurrency_test|2          |0           |2         |5           
(1 row)
24<:  <... completed>
BEGIN
25<:  <... completed>
BEGIN
25:END;
END
24:END;
END
22q: ... <quitting>
23q: ... <quitting>
24q: ... <quitting>
25q: ... <quitting>
DROP ROLE role_concurrency_test;
DROP
DROP RESOURCE GROUP rg_concurrency_test;
DROP

-- test4: concurrently drop resource group

DROP ROLE IF EXISTS role_concurrency_test;
DROP
-- start_ignore
DROP RESOURCE GROUP rg_concurrency_test;
ERROR:  resource group "rg_concurrency_test" does not exist
-- end_ignore
CREATE RESOURCE GROUP rg_concurrency_test WITH (concurrency=2, cpu_rate_limit=20, memory_limit=20);
CREATE
CREATE ROLE role_concurrency_test RESOURCE GROUP rg_concurrency_test;
CREATE

-- DROP should fail if there're running transactions
32:SET ROLE role_concurrency_test;
SET
32:BEGIN;
BEGIN
BEGIN;
BEGIN
DROP ROLE role_concurrency_test;
DROP
DROP RESOURCE GROUP rg_concurrency_test;
ERROR:  Cannot drop resource group "rg_concurrency_test"
HINT:   The resource group is currently managing 1 query(ies) and cannot be dropped.
	Terminate the queries first or try dropping the group later.
	The view pg_stat_activity tracks the queries managed by resource groups.
END;
END
32:END;
END
32:RESET ROLE;
RESET

-- DROP is abortted
BEGIN;
BEGIN
DROP ROLE role_concurrency_test;
DROP
DROP RESOURCE GROUP rg_concurrency_test;
DROP
SELECT r.rsgname, num_running, num_queueing, num_queued, num_executed FROM gp_toolkit.gp_resgroup_status s, pg_resgroup r WHERE s.groupid=r.oid AND r.rsgname='rg_concurrency_test';
rsgname|num_running|num_queueing|num_queued|num_executed
-------+-----------+------------+----------+------------
(0 rows)
32:SET ROLE role_concurrency_test;
SET
32&:BEGIN;  <waiting ...>
ABORT;
ABORT
32<:  <... completed>
BEGIN
32:SELECT r.rsgname, num_running, num_queueing, num_queued, num_executed FROM gp_toolkit.gp_resgroup_status s, pg_resgroup r WHERE s.groupid=r.oid AND r.rsgname='rg_concurrency_test';
rsgname            |num_running|num_queueing|num_queued|num_executed
-------------------+-----------+------------+----------+------------
rg_concurrency_test|1          |0           |0         |3           
(1 row)
32:END;
END
32:RESET ROLE;
RESET

-- DROP is committed
BEGIN;
BEGIN
DROP ROLE role_concurrency_test;
DROP
DROP RESOURCE GROUP rg_concurrency_test;
DROP
SELECT r.rsgname, num_running, num_queueing, num_queued, num_executed FROM gp_toolkit.gp_resgroup_status s, pg_resgroup r WHERE s.groupid=r.oid AND r.rsgname='rg_concurrency_test';
rsgname|num_running|num_queueing|num_queued|num_executed
-------+-----------+------------+----------+------------
(0 rows)
32:SET ROLE role_concurrency_test;
SET
32&:BEGIN;  <waiting ...>
END;
END
32<:  <... completed>
ERROR:  Resource group 32935 was concurrently dropped
32q: ... <quitting>
SELECT r.rsgname, num_running, num_queueing, num_queued, num_executed FROM gp_toolkit.gp_resgroup_status s, pg_resgroup r WHERE s.groupid=r.oid AND r.rsgname='rg_concurrency_test';
rsgname|num_running|num_queueing|num_queued|num_executed
-------+-----------+------------+----------+------------
(0 rows)

DROP ROLE IF EXISTS role_concurrency_test;
DROP
DROP RESOURCE GROUP rg_concurrency_test;
ERROR:  resource group "rg_concurrency_test" does not exist

-- test5: concurrently alter resource group cpu rate limit

-- start_ignore
DROP RESOURCE GROUP rg1_concurrency_test;
ERROR:  resource group "rg1_concurrency_test" does not exist
DROP RESOURCE GROUP rg2_concurrency_test;
ERROR:  resource group "rg2_concurrency_test" does not exist
-- end_ignore

CREATE RESOURCE GROUP rg1_concurrency_test WITH (concurrency=2, cpu_rate_limit=10, memory_limit=20);
CREATE
CREATE RESOURCE GROUP rg2_concurrency_test WITH (concurrency=2, cpu_rate_limit=20, memory_limit=20);
CREATE

41:BEGIN;
BEGIN
41:ALTER RESOURCE GROUP rg1_concurrency_test SET CPU_RATE_LIMIT 35;
ALTER
42:BEGIN;
BEGIN
42&:ALTER RESOURCE GROUP rg2_concurrency_test SET CPU_RATE_LIMIT 35;  <waiting ...>
41:ABORT;
ABORT
42<:  <... completed>
ALTER
42:COMMIT;
COMMIT
SELECT g.rsgname, c.cpu_rate_limit FROM gp_toolkit.gp_resgroup_config c, pg_resgroup g WHERE c.groupid=g.oid ORDER BY g.oid;
rsgname             |cpu_rate_limit
--------------------+--------------
default_group       |30            
admin_group         |10            
rg1_concurrency_test|10            
rg2_concurrency_test|35            
(4 rows)

DROP RESOURCE GROUP rg1_concurrency_test;
DROP
DROP RESOURCE GROUP rg2_concurrency_test;
DROP

CREATE RESOURCE GROUP rg1_concurrency_test WITH (concurrency=2, cpu_rate_limit=10, memory_limit=20);
CREATE
CREATE RESOURCE GROUP rg2_concurrency_test WITH (concurrency=2, cpu_rate_limit=20, memory_limit=20);
CREATE

41:BEGIN;
BEGIN
41:ALTER RESOURCE GROUP rg1_concurrency_test SET CPU_RATE_LIMIT 35;
ALTER
42:BEGIN;
BEGIN
42&:ALTER RESOURCE GROUP rg2_concurrency_test SET CPU_RATE_LIMIT 35;  <waiting ...>
41:COMMIT;
COMMIT
42<:  <... completed>
ERROR:  total cpu_rate_limit exceeded the limit of 100
41q: ... <quitting>
42q: ... <quitting>
SELECT g.rsgname, c.cpu_rate_limit FROM gp_toolkit.gp_resgroup_config c, pg_resgroup g WHERE c.groupid=g.oid ORDER BY g.oid;
rsgname             |cpu_rate_limit
--------------------+--------------
default_group       |30            
admin_group         |10            
rg1_concurrency_test|35            
rg2_concurrency_test|20            
(4 rows)

DROP RESOURCE GROUP rg1_concurrency_test;
DROP
DROP RESOURCE GROUP rg2_concurrency_test;
DROP


-- test6: cancel a query that is waiting for a slot
DROP ROLE IF EXISTS role_concurrency_test;
DROP
-- start_ignore
DROP RESOURCE GROUP rg_concurrency_test;
ERROR:  resource group "rg_concurrency_test" does not exist
-- end_ignore

CREATE RESOURCE GROUP rg_concurrency_test WITH (concurrency=1, cpu_rate_limit=20, memory_limit=20);
CREATE
CREATE ROLE role_concurrency_test RESOURCE GROUP rg_concurrency_test;
CREATE
51:SET ROLE role_concurrency_test;
SET
51:BEGIN;
BEGIN
52:SET ROLE role_concurrency_test;
SET
52&:BEGIN;  <waiting ...>
SELECT pg_cancel_backend(procpid) FROM pg_stat_activity WHERE waiting_reason='resgroup' AND rsgname='rg_concurrency_test';
pg_cancel_backend
-----------------
t                
(1 row)
52<:  <... completed>
ERROR:  canceling statement due to user request
52&:BEGIN;  <waiting ...>
SELECT pg_cancel_backend(procpid) FROM pg_stat_activity WHERE waiting_reason='resgroup' AND rsgname='rg_concurrency_test';
pg_cancel_backend
-----------------
t 
(1 row)
52<:  <... completed>
ERROR:  canceling statement due to user request
51q: ... <quitting>
52q: ... <quitting>
DROP ROLE role_concurrency_test;
DROP
DROP RESOURCE GROUP rg_concurrency_test;
DROP

-- test7: terminate a query that is waiting for a slot
DROP ROLE IF EXISTS role_concurrency_test;
DROP
-- start_ignore
DROP RESOURCE GROUP rg_concurrency_test;
ERROR:  resource group "rg_concurrency_test" does not exist
-- end_ignore

CREATE RESOURCE GROUP rg_concurrency_test WITH (concurrency=1, cpu_rate_limit=20, memory_limit=20);
CREATE
CREATE ROLE role_concurrency_test RESOURCE GROUP rg_concurrency_test;
CREATE
61:SET ROLE role_concurrency_test;
SET
61:BEGIN;
BEGIN
62:SET ROLE role_concurrency_test;
SET
62&:BEGIN;  <waiting ...>
SELECT pg_terminate_backend(procpid) FROM pg_stat_activity WHERE waiting_reason='resgroup' AND rsgname='rg_concurrency_test';
pg_terminate_backend
--------------------
t                   
(1 row)
62<:  <... completed>
FATAL:  terminating connection due to administrator command
server closed the connection unexpectedly
	This probably means the server terminated abnormally
	before or while processing the request.
61q: ... <quitting>
62q: ... <quitting>
DROP ROLE role_concurrency_test;
DROP
DROP RESOURCE GROUP rg_concurrency_test;
DROP
