<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Composite//EN" "ditabase.dtd">
<topic id="topic1" xml:lang="en">
  <title id="ij138244">Greenplum PostGIS Extension</title>
  <body>
    <draft-comment author="msk">DRAFT 5.0.0 - doc story <xref
        href="https://www.pivotaltracker.com/story/show/94760296" format="html" scope="external"
        >#94760296</xref></draft-comment>
    <p>This chapter contains the following information:</p>
    <ul>
      <li id="ij166737">
        <xref href="#topic2" type="topic" format="dita"/>
      </li>
      <li id="ij168801">
        <xref href="#topic3" type="topic" format="dita"/>
      </li>
      <li id="ij168816">
        <xref href="#topic5" type="topic" format="dita"/>
      </li>
      <li><xref href="#topic_bv4_rrk_f1b" format="dita"/></li>
      <li> Upgrading the Greenplum PostGIS Extension - DELETED</li>
      <li id="ij172091">
        <xref href="#topic6" type="topic" format="dita"/>
      </li>
      <li id="ij168827">
        <xref href="#topic7" type="topic" format="dita"/>
      </li>
      <li>
        <xref href="#postgis_support" format="dita"/>
      </li>
    </ul>
  </body>
  <topic id="topic2" xml:lang="en">
    <title id="ij166739">About PostGIS</title>
    <body>
      <p>PostGIS is a spatial database extension for PostgreSQL that allows GIS (Geographic
        Information Systems) objects to be stored in the database. The Greenplum Database PostGIS
        extension includes support for GiST-based R-Tree spatial indexes and functions for analysis
        and processing of GIS objects. </p>
      <p>The Greenplum Database PostGIS extension supports the PostGIS extension PostGIS Raster. The
        PostGIS Raster extension implements the <codeph>raster</codeph> data type as much as
        possible like the PostGIS <codeph>geometry</codeph> data type to offer a single set of
        overlay SQL functions (like <codeph>ST_Intersects</codeph>) operating seamlessly on vector
        and raster coverages. PostGIS Raster uses the GDAL (Geospatial Data Abstraction Library)
        translator library for raster geospatial data formats that presents a <xref
          href="http://www.gdal.org/gdal_datamodel.html" format="html" scope="external">single
          raster abstract data model</xref> to a calling application. </p>
      <p>For information about Greenplum Database PostGIS extension support, see <xref
          href="#postgis_support" format="dita"/>.</p>
      <p>For information about PostGIS, see <xref href="http://postgis.refractions.net/"
          scope="external" format="html"> http://postgis.refractions.net/</xref>
      </p>
      <p>For information about GDAL, see <xref href="http://www.gdal.org" format="html"
          scope="external">http://www.gdal.org</xref>. </p>
    </body>
    <topic id="topic3" xml:lang="en">
      <title id="ij168742">Greenplum PostGIS Extension</title>
      <body>
        <draft-comment author="msk">How to install PostGIS using OSS?</draft-comment>
        <!--For OSS, compile and install the PostGIS extension package. -->
        <p otherprops="oss-only">To use the PostGIS extension, build and compile the extension. See
          the instructions in the Github Greenplum Database PostGIS extension repo.</p>
        <!--The PostGIS extension package is available for Pivotal Greenplum only.-->
        <p>The Greenplum Database PostGIS extension package is available from <xref
            href="https://network.pivotal.io" scope="external" format="html"><ph>Pivotal
              Network</ph></xref>. You can install the package using the Greenplum Package Manager
            (<codeph>gppkg</codeph>). For details, see <codeph>gppkg</codeph> in the <cite>Greenplum
            Database Utility Guide</cite>.</p>
        <p>Greenplum Database supports the PostGIS extension with these component versions.<ul
            id="ul_csh_q3z_d1b">
            <li>PostGIS 2.1.5</li>
            <li>Proj 4.8.0 </li>
            <li>Geos 3.4.2</li>
            <li>GDAL 1.11.1</li>
            <li>Json 0.12</li>
            <li>Expat 2.1.0</li>
          </ul></p>
        <p otherprops="pivotal">For the information about supported extension packages and software
          versions see the <cite>Greenplum Database Release Notes</cite>.</p>
        <p>Major enhancements and changes in PostGIS 2.1.5 from 2.0.3 include new PostGIS Raster
          functions. For a list of new and enhanced functions in PostGIS 2.1, see the PostGIS
          documentation <xref
            href="http://postgis.net/docs/manual-2.1/PostGIS_Special_Functions_Index.html#NewFunctions_2_1"
            format="html" scope="external">PostGIS Functions new or enhanced in 2.1</xref>.</p>
        <p>For a list of breaking changes in PostGIS 2.1, see <xref
            href="http://postgis.net/docs/manual-2.1/PostGIS_Special_Functions_Index.html#ChangedFunctions_2_1"
            format="html" scope="external">PostGIS functions breaking changes in 2.1</xref>.</p>
        <p>For a comprehensive list of PostGIS changes in PostGIS 2.1.5 and earlier, see PostGIS 2.1
          Appendix A <xref href="http://postgis.net/docs/manual-2.1/release_notes.html#idm34802"
            format="html" scope="external">Release 2.1.5</xref>.</p>
      </body>
      <topic id="topic4" xml:lang="en">
        <title>Greenplum Database PostGIS Limitations</title>
        <body>
          <p>The Greenplum Database PostGIS extension does not support the following features:</p>
          <ul id="ul_mm2_p42_4p">
            <li id="ij169095">Topology</li>
            <li id="ij166819">A small number of user defined functions and aggregates</li>
            <li id="ij166822">PostGIS long transaction support</li>
            <li id="ij169588">Geometry and geography type modifier</li>
          </ul>
          <p>For information about Greenplum Database PostGIS support, see <xref
              href="#postgis_support" format="dita"/>.</p>
        </body>
      </topic>
    </topic>
  </topic>
  <topic id="topic5" xml:lang="en">
    <title id="ij169610">Enabling PostGIS Support</title>
    <body>
      <p>After installing the PostGIS extension package, you enable PostGIS support for each
        database that requires its use. To enable PostGIS support in your database, run SQL scripts
        that are supplied with the PostGIS package in
          <codeph>$GPHOME/share/postgresql/contrib/postgis-2.1/</codeph> .</p>
      <p dir="ltr" id="docs-internal-guid-8c038020-7f9c-b023-7fae-617656ae21e7">These scripts enable
        PostGIS, and PostGIS Raster in a database.<ul id="ul_iph_ddm_d1b">
          <li><codeph>postgis.sql</codeph> - Load the PostGIS object and function definitions.</li>
          <li><codeph>rtpostgis.sql</codeph> - Load the PostGIS <codeph>raster</codeph> object and
            function definitions.</li>
        </ul></p>
      <p>These SQL scripts add data and comments to a PostGIS enabled database.<ul
          id="ul_l3c_zbz_d1b">
          <li><codeph>spatial_ref_sys.sql</codeph> - Populate the <codeph>spatial_ref_sys</codeph>
            table with a complete set of EPSG coordinate system definition identifiers. With the
            definition identifiers you can perform <codeph>ST_Transform()</codeph> operations on
              geometries.<note type="note">If you have overridden standard entries and want to use
              those overrides, do not load the <codeph>spatial_ref_sys.sql</codeph> file when
              creating the new database.</note></li>
          <li><codeph>postgis_comments.sql</codeph> - Add comments to the PostGIS functions.</li>
          <li><codeph>raster_comments.sql</codeph> - Add comments to the PostGIS Raster
            functions.</li>
        </ul></p>
      <p>You can view comments with the <codeph>psql</codeph> meta-command <codeph>\dd
            <varname>function_name</varname></codeph> or from any tool that can show Greenplum
        Database function comments.</p>
      <p>For example, these commands run the SQL scripts <codeph>postgis.sql</codeph>,
          <codeph>rtpostgis.sql</codeph> and <codeph>spatial_ref_sys.sql</codeph> in the database
          <codeph>mydatabase</codeph>.</p>
      <codeblock>psql -d mydatabase -f 
  $GPHOME/share/postgresql/contrib/postgis-2.1/postgis.sql
psql -d mydatabase -f 
  $GPHOME/share/postgresql/contrib/postgis-2.1/rtpostgis.sql
psql -d mydatabase -f 
  $GPHOME/share/postgresql/contrib/postgis-2.1/spatial_ref_sys.sql</codeblock>
      <p>After running the scripts, the database is spatially enabled and is PostGIS Raster
        enabled.</p>
      <draft-comment author="msk">Can/should any of the env vars be changed?</draft-comment>
    </body>
    <topic id="topic_l4l_gg1_21b">
      <title>Support for PostGIS Raster</title>
      <body>
        <p dir="ltr">The postGIS installation adds these lines to the
            <codeph>greenplum_path.sh</codeph> file for PostGIS Raster support.</p>
        <codeblock>export GDAL_DATA=$GPHOME/share/gdal
export POSTGIS_ENABLE_OUTDB_RASTERS=0
export POSTGIS_GDAL_ENABLED_DRIVERS=ENABLE_ALL</codeblock>
        <p><codeph>GDAL_DATA</codeph> specifies location of and GDAL utilities and support files
          used by the GDAL library. For example, in order for GDAL to properly evaluate EPSG codes
          requires EPSG support files (so called dictionaries, mostly in ​CSV format), such as
            <codeph>gcs.csv​</codeph> and <codeph>pcs.csv</codeph>​, found in the
            <codeph>GDAL_DATA</codeph> directory.</p>
        <p><codeph>POSTGIS_GDAL_ENABLED_DRIVERS</codeph> sets the enabled GDAL drivers in the
          PostGIS environment.</p>
        <p><codeph>POSTGIS_ENABLE_OUTDB_RASTERS</codeph> is boolean configuration option to enable
          access to out of database raster bands. </p>
      </body>
    </topic>
  </topic>
  <topic id="topic_bv4_rrk_f1b">
    <title>Removing PostGIS Support</title>
    <body>
      <draft-comment author="msk">Added late</draft-comment>
      <p>To remove PostGIS support in your database, run SQL scripts that are supplied with the
        PostGIS package in <codeph>$GPHOME/share/postgresql/contrib/postgis-2.1/</codeph> These
        scripts remove PostGIS and PostGIS Raster objects from a database.<ul id="ul_bzh_xrk_f1b">
          <li><codeph>uninstall_postgis.sql</codeph> - Removes the PostGIS object and function
            definitions.</li>
          <li><codeph>uninstall_rtpostgis.sql</codeph> - Removes the PostGIS <codeph>raster</codeph>
            object and function definitions.</li>
        </ul></p>
      <p dir="ltr">Ensure that these lines for PostGIS Raster support are removed from the
          <codeph>greenplum_path.sh</codeph> file.</p>
      <codeblock>export GDAL_DATA=$GPHOME/share/gdal
export POSTGIS_ENABLE_OUTDB_RASTERS=0
export POSTGIS_GDAL_ENABLED_DRIVERS=ENABLE_ALL</codeblock>
    </body>
  </topic>
  <topic id="topic6" xml:lang="en">
    <title id="ij169830">Migrating from PostGIS 2.0 to 2.1</title>
    <body>
      <draft-comment author="msk">SOFT UPGRADE - use upgrade for PostGIS that was installed without
        extensions, by running a SQL script?<p>Will a script be supplied in the installed
          package?</p><p>Is PostGIS package installed as a Postgres extension (with CREATE
          EXTENSION)?</p></draft-comment>
      <p>To migrate a PostGIS-enabled database from 2.0 to 2.1 you can perform a PostGIS SOFT
        UPGRADE. A SOFT UPGRADE consists of running a SQL script.</p>
      <p>For information about the PostGIS upgrade procedure, see the PostGIS upgrade documentation:
          <xref href="http://postgis.net/docs/manual-2.1/postgis_installation.html#upgrading"
          format="html" scope="external">PostGIS upgrade documentation:</xref>.</p>
    </body>
  </topic>
  <topic id="topic7" xml:lang="en">
    <title id="ij170351">Usage</title>
    <body>
      <p>
        <ph>The following example SQL statements create non-OpenGIS tables and geometries.</ph>
      </p>
      <codeblock>CREATE TABLE geom_test ( gid int4, geom geometry, 
  name varchar(25) );
INSERT INTO geom_test ( gid, geom, name )
  VALUES ( 1, 'POLYGON((0 0 0,0 5 0,5 5 0,5 0 0,0 0 0))', '3D Square');
INSERT INTO geom_test ( gid, geom, name ) 
  VALUES ( 2, 'LINESTRING(1 1 1,5 5 5,7 7 5)', '3D Line' );
INSERT INTO geom_test ( gid, geom, name )
  VALUES ( 3, 'MULTIPOINT(3 4,8 9)', '2D Aggregate Point' );
SELECT * from geom_test WHERE geom &amp;&amp;
  Box3D(ST_GeomFromEWKT('LINESTRING(2 2 0, 3 3 0)'));</codeblock>
      <p>The following example SQL statements create a table, adds a geometry column to the table
        with a SRID integer value that references an entry in the SPATIAL_REF_SYS table. The
          <codeph>INSERT</codeph> statements add to geopoints to the table.</p>
      <codeblock>CREATE TABLE geotest (id INT4, name VARCHAR(32) );
SELECT AddGeometryColumn('geotest','geopoint', 4326,'POINT',2);
INSERT INTO geotest (id, name, geopoint)
  VALUES (1, 'Olympia', ST_GeometryFromText('POINT(-122.90 46.97)', 4326));
INSERT INTO geotest (id, name, geopoint)|
  VALUES (2, 'Renton', ST_GeometryFromText('POINT(-122.22 47.50)', 4326));
SELECT name,ST_AsText(geopoint) FROM geotest;</codeblock>
    </body>
    <topic id="topic8" xml:lang="en">
      <title>Spatial Indexes</title>
      <body>
        <p>PostgreSQL provides support for GiST spatial indexing. The GiST scheme offers indexing
          even on large objects. It uses a system of lossy indexing in which smaller objects act as
          proxies for larger ones in the index. In the PostGIS indexing system, all objects use
          their bounding boxes as proxies in the index.</p>
      </body>
      <topic id="topic9" xml:lang="en">
        <title>Building a Spatial Index</title>
        <body>
          <p>You can build a GiST index as follows:</p>
          <codeblock>CREATE INDEX <i>indexname</i>
ON <i>tablename</i>
USING GIST ( <i>geometryfield</i> );</codeblock>
        </body>
      </topic>
    </topic>
  </topic>
  <topic id="postgis_support">
    <title>PostGIS Extension Support and Limitations</title>
    <body>
      <p>This section describes Greenplum PostGIS extension feature support and limitations.</p>
      <ul id="ul_gvb_b4b_3p">
        <li>
          <xref href="#topic_g2d_hkb_3p" format="dita"/>
        </li>
        <li>
          <xref href="#topic_y5z_nkb_3p" format="dita"/>
        </li>
        <li><xref href="#topic_bl3_4vy_d1b" format="dita"/></li>
        <li>
          <xref href="#topic_wy2_rkb_3p" format="dita"/>
        </li>
      </ul>
      <p>The Greenplum Database PostGIS extension does not support the following features:</p>
      <ul id="ul_xpr_21h_kp">
        <li>Topology</li>
        <li>Some Raster Functions</li>
      </ul>
    </body>
    <topic id="topic_g2d_hkb_3p">
      <title>Supported PostGIS Data Types</title>
      <body>
        <p>Greenplum Database PostGIS extension supports these PostGIS data types:</p>
        <ul id="ul_bdm_qnp_fp">
          <li dir="ltr">box2d</li>
          <li dir="ltr">box3d</li>
          <li dir="ltr">geometry</li>
          <li dir="ltr">geography</li>
        </ul>
        <p>For a list of PostGIS data types, operators, and functions, see the <xref
            href="http://postgis.net/docs/manual-2.1/reference.html" format="html" scope="external"
            >PostGIS reference documentation</xref>.</p>
      </body>
    </topic>
    <topic id="topic_bl3_4vy_d1b">
      <title>Supported PostGIS Raster Data Types</title>
      <body>
        <p dir="ltr">Greenplum Database PostGIS supports these PostGIS Raster data types. </p>
        <ul id="ul_obf_z2m_d1b">
          <li dir="ltr">geomval</li>
          <li dir="ltr">addbandarg</li>
          <li dir="ltr">rastbandarg</li>
          <li dir="ltr">raster</li>
          <li dir="ltr">reclassarg </li>
          <li dir="ltr">summarystats </li>
          <li dir="ltr">unionarg</li>
        </ul>
        <draft-comment dir="ltr">Commend from google doc. What does this mean? Does it require
          documentation note? <p>They should be similar as postgis 2.1.5, but the operators that
            introduced in PG9.0+ are not supported and need some workaround. </p></draft-comment>
        <p>For information about PostGIS Raster data Management, queries, and applications <xref
            href="http://postgis.net/docs/manual-2.1/using_raster_dataman.html" format="html"
            scope="external">http://postgis.net/docs/manual-2.1/using_raster_dataman.html</xref></p>
        <p>For a list of PostGIS Raster data types, operators, and functions, see the <xref
            href="http://postgis.net/docs/manual-2.1/RT_reference.html" format="html"
            scope="external">PostGIS Raster reference documentation</xref>.</p>
      </body>
    </topic>
    <topic id="topic_y5z_nkb_3p">
      <title>Supported PostGIS Index</title>
      <body>
        <p>Greenplum Database PostGIS extension supports the GiST (Generalized Search Tree)
          index.</p>
      </body>
    </topic>
    <topic id="topic_wy2_rkb_3p">
      <title>PostGIS Extension Limitations</title>
      <body>
        <draft-comment author="msk">
          <sl>
            <sli>remove raster limitation</sli>
            <sli>remove JSON limitation <apiname>ST_GeomFromGeoJSON</apiname> - NOTE GPDB supports
              JSON not JSONB</sli>
            <sli>modified note about analyze functions</sli>
          </sl>
          <codeblock>1. regress_selectivity - <b>see bullet 2</b>
  #Greenplum does not support ANALYZE functions for user-defined data types.
2. long_xact - <b>see bullet 4</b>
  #Greenplum does not support long transcation for user-defined data types with triggers
3. typmod - <b>see bullet 5</b>
  #Greenplum does not support BINARY, so test cannot continues...</codeblock>
        </draft-comment>
        <p>This section lists the Greenplum Database PostGIS extension limitations for user defined
          functions (UDFs), data types, and aggregates. </p>
        <ul id="ul_vzc_bpb_3p">
          <li>Data types and functions related to PostGIS topology functionality, such as
              <apiname>TopoGeometry</apiname>, are not supported by Greenplum Database.</li>
          <li> Functions that perform <codeph>ANALYZE</codeph> operations for user-defined data
            types are not supported. For example, <apiname>ST_Estimated_Extent</apiname> function is
            not supported. The function requires table column statistics for user defined data types
            that are not available with Greenplum Database.</li>
          <li>These PostGIS aggregates are not supported by Greenplum Database:<ul
              id="ul_ylg_hpb_3p">
              <li><apiname>ST_MemCollect</apiname></li>
              <li><apiname>ST_MakeLine</apiname></li>
            </ul><p>On a Greenplum Database with multiple segments, the aggregate might return
              different answers if it is called several times repeatedly.</p></li>
          <li>
            <p>Greenplum Database does not support PostGIS long transactions.</p>
            <p>PostGIS relies on triggers and the PostGIS table <i>public.authorization_table</i>
              for long transaction support. When PostGIS attempts to acquire locks for long
              transactions, Greenplum Database reports errors citing that the function cannot access
              the relation, <i>authorization_table</i>.</p>
          </li>
          <li>Greenplum Database does not support type modifiers for user defined types. <p>The work
              around is to use the <codeph>AddGeometryColumn</codeph> function for PostGIS geometry.
              For example, a table with PostGIS geometry cannot be created with the following SQL
              command:<codeblock>CREATE TABLE geometries(id INTEGER, geom geometry(LINESTRING));</codeblock>Use
              the <codeph>AddGeometryColumn</codeph> function to add PostGIS geometry to a table.
              For example, these following SQL statements create a table and add PostGIS geometry to
              the
              table:<codeblock>CREATE TABLE geometries(id INTEGER);
SELECT AddGeometryColumn('public', 'geometries', 'geom', 0, 'LINESTRING', 2);</codeblock></p></li>
        </ul>
      </body>
    </topic>
  </topic>
</topic>
