<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Composite//EN" "ditabase.dtd">
<topic id="topic1">
    <title id="bv20941">CREATE FOREIGN TABLE</title>
    <body>
        <p id="sql_command_desc">Defines a new foreign table.</p>
        <section id="section2">
            <title>Synopsis</title>
            <codeblock id="sql_command_synopsis">CREATE FOREIGN TABLE [ IF NOT EXISTS ] <varname>table_name</varname> ( [
    { <varname>column_name</varname> <varname>data_type</varname> [ NULL | NOT NULL ] }
      [, ... ]
] )
    SERVER <varname>server_name</varname>
    [ OPTIONS ( <varname>option</varname> '<varname>value</varname>' [, ... ] ) ]</codeblock>
        </section>
        <section id="section3">
            <title>Description</title>
            <p><codeph>CREATE FOREIGN TABLE</codeph> creates a new foreign table
                in the current database.  The user who creates the foreign table becomes
                 its owner.</p>
            <p>If you schema-qualify the table name (for example, <codeph>CREATE FOREIGN TABLE myschema.mytable ...</codeph>), Greenplum Database creates the table in the specified schema. Otherwise, the foreign table is created in the current schema. The name of the foreign table must be distinct from the name of any other foreign table, table, sequence, index, or view in the same schema.</p>
            <p>Because <codeph>CREATE FOREIGN TABLE</codeph> automatically creates a data type that represents the composite type corresponding to one row of the foreign table, foreign tables cannot have the same name as any existing data type in the same schema.</p>
        </section>
        <section id="section4">
            <title>Parameters</title>
            <parml>
                <plentry>
                    <pt>IF NOT EXISTS</pt>
                    <pd>
                        <p>Do not throw an error if a relation with the same name already exists. Greenplum Database issues a notice in this case. Note that there is no guarantee that the existing relation is anything like the one that would have been created.</p>
                    </pd>
                </plentry>
                <plentry>
                    <pt><varname>table_name</varname></pt>
                    <pd>
                        <p>The name (optionally schema-qualified) of the foreign table to create.</p>
                    </pd>
                </plentry>
                <plentry>
                    <pt><varname>column_name</varname></pt>
                    <pd>
                        <p>The name of a column to create in the new foreign table.</p>
                    </pd>
                </plentry>
                <plentry>
                    <pt><varname>data_type</varname></pt>
                    <pd>
                        <p>The data type of the column, including array specifiers.</p>
                    </pd>
                </plentry>
                <plentry>
                    <pt>NOT NULL</pt>
                    <pd>
                        <p>The column is not allowed to contain null values.</p>
                    </pd>
                </plentry>
                <plentry>
                    <pt> NULL</pt>
                    <pd>
                        <p>The column is allowed to contain null values. This is the default</p>
                        <p>This clause is provided only for compatibility with non-standard SQL databases. Its use is discouraged in new applications.</p>
                    </pd>
                </plentry>
                <plentry>
                    <pt><varname>server_name</varname></pt>
                    <pd>
                        <p>The name of an existing server for the foreign table.</p>
                    </pd>
                </plentry>
                <plentry>
                    <pt>OPTIONS ( <varname>option</varname> '<varname>value</varname>' [, ... ] )</pt>
                    <pd>
                        <p>The options for the new foreign table. Option names must be unique. The option names and values are foreign-data wrapper-specific and are validated using the foreign-data wrapper's <varname>validator_function</varname>.</p>
                    </pd>
                </plentry>
            </parml>
        </section>
        <section id="section6">
            <title>Examples</title>
            <p>Create a foreign table named <codeph>films</codeph> with the server named <codeph>film_server</codeph>:</p><codeblock>CREATE FOREIGN TABLE films (
    code        char(5) NOT NULL,
    title       varchar(40) NOT NULL,
    did         integer NOT NULL,
    date_prod   date,
    kind        varchar(10),
    len         interval hour to minute
)
SERVER film_server;;</codeblock>
        </section>
        <section id="section7">
            <title>Compatibility</title>
            <p><codeph>CREATE FOREIGN DATA WRAPPER</codeph> largely conforms to the SQL standard; however, much as with <codeph><xref href="CREATE_TABLE.xml#topic1">CREATE
                    TABLE</xref></codeph>, <codeph>NULL</codeph> constraints and zero-column foreign tables are permitted.</p>
        </section>
        <section id="section8">
            <title>See Also</title>
            <p><codeph><xref href="ALTER_FOREIGN_TABLE.xml#topic1">ALTER FOREIGN TABLE</xref></codeph>,
                        <codeph><xref href="DROP_FOREIGN_TABLE.xml#topic1">DROP
                    FOREIGN TABLE</xref></codeph>,
                        <codeph><xref href="CREATE_TABLE.xml#topic1">CREATE
                    TABLE</xref></codeph>,
                        <codeph><xref href="CREATE_SERVER.xml#topic1">CREATE
                    SERVER</xref></codeph></p>
        </section>
    </body>
</topic>
