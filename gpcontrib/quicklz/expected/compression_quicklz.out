-- Tests for quicklz compression.
-- Test for appendonly row oriented
CREATE TABLE quicklztest_row (id int4, t text) WITH (appendonly=true, compresstype=quicklz, orientation=row);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'id' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
INSERT INTO quicklztest_row SELECT g, 'foo' || g FROM generate_series(1, 100) g;
INSERT INTO quicklztest_row SELECT g, 'bar' || g FROM generate_series(1, 100) g;
-- Check contents, at the beginning of the table and at the end.
SELECT * FROM quicklztest_row ORDER BY id LIMIT 5;
 id |  t   
----+------
  1 | bar1
  1 | foo1
  2 | bar2
  2 | foo2
  3 | foo3
(5 rows)

SELECT * FROM quicklztest_row ORDER BY id DESC LIMIT 5;
 id  |   t    
-----+--------
 100 | bar100
 100 | foo100
  99 | bar99
  99 | foo99
  98 | foo98
(5 rows)

-- Check that we actually compressed data
SELECT get_ao_compression_ratio('quicklztest_row') > 1;
 ?column? 
----------
 t
(1 row)

-- Test for appendonly column oriented
CREATE TABLE quicklztest_column (id int4, t text) WITH (appendonly=true, compresstype=quicklz, orientation=column);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'id' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
INSERT INTO quicklztest_column SELECT g, 'foo' || g FROM generate_series(1, 100) g;
INSERT INTO quicklztest_column SELECT g, 'bar' || g FROM generate_series(1, 100) g;
-- Check contents, at the beginning of the table and at the end.
SELECT * FROM quicklztest_column ORDER BY id LIMIT 5;
 id |  t   
----+------
  1 | bar1
  1 | foo1
  2 | bar2
  2 | foo2
  3 | foo3
(5 rows)

SELECT * FROM quicklztest_column ORDER BY id DESC LIMIT 5;
 id  |   t    
-----+--------
 100 | bar100
 100 | foo100
  99 | bar99
  99 | foo99
  98 | foo98
(5 rows)

-- Check that we actually compressed data
SELECT get_ao_compression_ratio('quicklztest_column') > 1;
 ?column? 
----------
 t
(1 row)

-- Test the bounds of compresslevel. QuickLZ compresslevel 1 is the only one that should work.
CREATE TABLE quicklztest_invalid (id int4) WITH (appendonly=true, compresstype=quicklz, compresslevel=-1);
ERROR:  value -1 out of bounds for option "compresslevel"
DETAIL:  Valid values are between "0" and "19".
CREATE TABLE quicklztest_invalid (id int4) WITH (appendonly=true, compresstype=quicklz, compresslevel=0);
ERROR:  compresstype can't be used with compresslevel 0
CREATE TABLE quicklztest_invalid (id int4) WITH (appendonly=true, compresstype=quicklz, compresslevel=3);
ERROR:  compresslevel=3 is out of range for quicklz (should be 1)
